{
  "lastFetched": "2019-10-21T08:09:31.933Z",
  "children": [
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Juan Fernandes",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/6f87f8397b1ce0e327624229127a7be4b7bd19ef83e8d1072275b56c8ad0bf3f.jpg",
        "url": "https://twitter.com/juanfernandes"
      },
      "url": "https://twitter.com/justmarkup/status/1125387621633597441#favorited-by-7581192",
      "published": null,
      "wm-received": "2019-05-15T11:53:00Z",
      "wm-id": 614416,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1125387621633597441/7581192",
      "wm-target": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "like-of": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Manuel Matuzović",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/bef8b2059829d0a46f469f0bc064f977f6be821d88dcedf0c01a27bb2f1109e9.jpeg",
        "url": "https://twitter.com/mmatuzo"
      },
      "url": "https://twitter.com/justmarkup/status/1125387621633597441#favorited-by-22161724",
      "published": null,
      "wm-received": "2019-05-15T11:52:51Z",
      "wm-id": 614415,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1125387621633597441/22161724",
      "wm-target": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "like-of": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Michael Scharnagl",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/0a236d69d7269a332c3cec198e0fce62d5d6c9749c60db7513c65f2511dbca5c.jpg",
        "url": "https://twitter.com/justmarkup"
      },
      "url": "https://twitter.com/justmarkup/status/1128669001595461633#favorited-by-20070025",
      "published": null,
      "wm-received": "2019-05-15T14:31:33Z",
      "wm-id": 614434,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1128669001595461633/20070025",
      "wm-target": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "like-of": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/",
      "published": null,
      "wm-received": "2019-09-29T17:05:52Z",
      "wm-id": 701482,
      "wm-source": "https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/",
      "wm-target": "https://justmarkup.com/log/2017/02/css-and-progressive-enhancement/",
      "name": "Writing CSS with Accessibility in Mind – Manuel Matuzovic",
      "content": {
        "html": "<p>I made my first website about 17 years ago when <a href=\"https://www.w3.org/Style/CSS20/history.html\">CSS was still relatively new</a>. Since then a lot of things have changed and CSS now gives us an incredible set of tools to style the web. We went from <a href=\"http://www.will-harris.com/verdana-georgia.htm\">Verdana</a> to Webfonts, from fixed widths to <a href=\"https://alistapart.com/article/responsive-web-design\">Responsive Web Design</a>, from table-based layouts to <a href=\"https://www.w3.org/TR/css-grid-1/\">Grid</a>, and we don’t have to use images anymore for borders, fonts or <a href=\"https://alistapart.com/article/cssdropshadows\">shadows</a>. We have <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">custom properties</a>, <a href=\"https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/\">Feature Queries</a>, <a href=\"https://developer.mozilla.org/de/docs/Web/CSS/calc\">calc()</a> and numerous new <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/length\">units</a>. This of course is only a subset of the great developments of the last years.</p>\n<p><img alt=\"\" height=\"1111\" src=\"https://miro.medium.com/max/60/1*sFUYq_Kl0pEjvpwzVoquhA.png?q=20\" width=\"1200\" />Writing CSS with Accessibility in Mind</p>\n<p>While this wide range of properties and endless ways of solving tasks with CSS makes our lives easier, it also creates the potential to worsen the experience for our users. It’s actually possible to make a website inaccessible in just <a href=\"http://outlinenone.com/\">three lines of CSS</a>.</p>\n<p>In this post I’ve collected techniques, considerations and approaches that will help you write more accessible CSS. The collection starts with basic concepts and well-known properties and covers some of the newer stuff at the end.</p>\n<p>In the end it got way bigger than expected, so here’s a handy menu so you can jump directly to a section that interests you the most:</p>\n<ul><li><a href=\"http://medium.com/#5661\">From legible to readable text</a></li>\n<li><a href=\"http://medium.com/#7013\">Using content in pseudo elements cautiously</a></li>\n<li><a href=\"http://medium.com/#ea36\">The screen is not the only medium</a></li>\n<li><a href=\"http://medium.com/#7f24\">Fallback for property values with incomplete support</a></li>\n<li><a href=\"http://medium.com/#3613\">There are many ways to hide content</a></li>\n<li><a href=\"http://medium.com/#72ff\">You can’t trust bad contrast</a></li>\n<li><a href=\"http://medium.com/#08b1\">Color alone should not be the only source of information</a></li>\n<li><a href=\"http://medium.com/#bf38\">Taking care of order</a></li>\n<li><a href=\"http://medium.com/#35f0\">Focus on what’s important: focus</a></li>\n<li><a href=\"http://medium.com/#fb97\">Grid and flat document structures</a></li>\n</ul><p>Enjoy!</p>\n<p>Images, icons and videos are an integral part in today’s web design, but text still makes up the majority of content on most websites. It’s important to spend a good amount of time styling, testing and fine-tuning font properties because text must be readable no matter the device.</p>\n<h2>Increasing font size</h2>\n<p><img alt=\"\" height=\"750\" src=\"https://miro.medium.com/max/60/1*dHl0fVXbqfbQXE-UG-DFfA.jpeg?q=20\" width=\"1200\" />Font size should increase with the user’s distance from the screen (<a href=\"https://blog.marvelapp.com/body-text-small/\">Source: Marvel</a>)</p>\n<p>There was a time were a <a href=\"https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/\">12px font size for body text was standard</a>, but with the rise of devices with higher resolutions the average font size settled somewhere between 15 and 18px for a while. In recent years, it has risen again to 20px and up, which is a good thing. Text must be big enough for reading on smartphones and increase with the size of the screen in order to still be readable from distance on big screens like TVs.</p>\n<p>As the characteristics of typefaces may differ a lot, it doesn’t make sense to define a standard minimum size, but 18–20px probably is a good starting point for smaller screen sizes. <br />Of course, there’s a lot more to say about font size, but that would be too much for this article. I suggest you read <a href=\"https://blog.marvelapp.com/body-text-small/\">Your Body Text Is Too Small</a> by <a href=\"https://twitter.com/xtianmiller\">Christian Miller</a> for more details.</p>\n<h2>Setting line height</h2>\n<p>The default line height in browsers is at roughly 1.2. According to the <a href=\"https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-visual-presentation\">Web Content Accessibility Guidelines</a> it should be at least 1.5 within paragraphs in blocks of text.</p>\n<p><img alt=\"\" height=\"512\" src=\"https://miro.medium.com/max/60/1*11s0oQqUyiWb3hhk1g5MAw.png?q=20\" width=\"1200\" />A paragraph with a line-height of 1.2 compared to a paragraph with a line-height of 1.5</p>\n<p>Text within a paragraph with adjusted line height isn’t just better readable, but often also visually more appealing.</p>\n<h2>Aligning text to the left or right</h2>\n<p><img alt=\"\" height=\"97\" src=\"https://miro.medium.com/max/60/1*yCJ2EkFtsYyKJ9K2FTDW6g.png?q=20\" width=\"744\" />Irregular word spacing in justified text</p>\n<p>Even though some of us may prefer justified over left or right aligned text because it looks nicer, it’s considered bad practice. text-align: justify modifies word spacing to create same length lines. Those uneven spaces can harm readability and be very distracting. Breaking up words when necessary could be a solution, but <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens?redirectlocale=en-US&amp;redirectslug=CSS%2Fhyphens#Languages_support_notes\">CSS Hyphenation</a> isn’t well supported and might not work as expected.</p>\n<h2>Defining paragraph widths</h2>\n<p>According to several sources designers should strive for <a href=\"https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/#line-length-measure-and-reading\">45 to 85 characters per line</a> since the ideal width for a paragraph is supposedly 65 characters.</p>\n<p>When defining widths of text blocks the <a href=\"http://caniuse.com/#feat=ch-unit\">ch unit</a> may come in handy since 1ch is equivalent to the width of the zero (0) character. It also changes as the font-family or font-size changes.</p>\n<p>p {<br />  /* Maximum width of 65characters */<br />  max-width: 65ch;<br />}</p>\n<p>If you are using any type of responsive typography technique make sure test your site on very large screens. If there’s no limit to your font sizes, text may become unreadable at a certain viewport size. If you want to know how to set limits or if you’re unfamiliar with responsive typography, read <a href=\"https://twitter.com/MikeRiethmuller\">Mike Riethmullers</a> article <a href=\"https://madebymike.com.au/writing/precise-control-responsive-typography/\">Precise control over responsive typography</a>.</p>\n<p>We can use the pseudo elements ::before and ::after to add CSS at the very beginning or at the very end of an element. It gives us a pretty common and handy way of adding design elements to our components, but it also allows to add content using the content property. In the sense of the <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a> we shouldn’t do that.</p>\n<p>h2 {<br />  content: “DON’T DO THIS”;<br />}</p>\n<p>Our content should be in HTML files, in a database, or coming from an API, but not in our CSS. Sometimes we use the content property for adding non-text content like font icons or special characters. If we do that, we need to remember that <a href=\"https://tink.uk/accessibility-support-for-css-generated-content/\">some screen readers recognize and announce generated content</a>. If the generated content is purely presentational, make sure to hide it from assistive technology, for example by using aria-hidden.</p>\n<p><span></span></p>\n<p>Even though we live in a digital age, people still print stuff. Make sure that your pages are accessible and usable even when printed out our saved as PDF. All you have to do is to add a @media block to your CSS and tweak the styling of elements that don’t look right or hide those that don’t make sense on paper, like navigation or ads.</p>\n<p>@media print {<br />  .header {<br />    position: static;<br />  }  nav {<br />    display: none;<br />  }<br />}</p>\n<p>One of the issues with printed web pages is that links are completely useless because you don’t know where they’re are leading. Luckily CSS gives us a way of <a href=\"https://alistapart.com/article/goingtoprint\">revealing the values of attributes and showing them on screen</a> (or paper in this case).</p>\n<p>@media print {<br />  a[href^=”http”]:not([href*=”mywebsite.com”])::after {<br />    content: ” (” attr(href) “)”;<br />  }<br />}</p>\n<p>These lines will display the value of the href attribute next to every link that has a href attribute, which starts with <em>http</em>, but doesn’t have mywebsite.com in its value.</p>\n<p>Firefox and especially Chrome offer <a href=\"https://uxdesign.cc/i-totally-forgot-about-print-style-sheets-f1e6604cfd6#63e3\">tools for testing and debugging print style sheets</a>.</p>\n<p>If you want to dig deeper, I’ve collected a number of <a href=\"https://uxdesign.cc/i-totally-forgot-about-print-style-sheets-f1e6604cfd6\">tips and tricks for working with print styles</a>.</p>\n<p>Sometimes we find ourselves in a situation where we want to use a certain property value but can’t because it’s not supported in some browsers. That shouldn’t stop us from using it as long as we provide a fallback. Often we don’t even need <a href=\"https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/\">Feature Queries</a> or any other feature detection to do that. <br />Let’s say you want to use the vmax unit, which IE and <a href=\"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6514497-vmax-unit\">older versions of Edge</a> don’t understand.</p>\n<p>div {<br />  width: 50vmax; /* Doesn’t work in IE and older versions of Edge */<br />}</p>\n<p>In order to provide a fallback, you simply set the width property to something less ideal, but something the browser will understand, e.g. width: 50vw. In the next line you set it to the actual value you want.</p>\n<p>div {<br />  width: 50vw;<br />  width: 50vmax;<br />}</p>\n<p>Browsers that don’t understand vmax will interpret width: 50vw and simply skip width: 50vmax. On the other hand, browsers that do understand it will first interpret width: 50vw and then width: 50vmax. Since the vmax declaration comes after the vw declaration, the vmax version is what users will get.</p>\n<p>Headings in HTML are very useful when it comes to outlining a document. By using headings </p>\n<h1> – \n</h1><h6> you tell the browser and other software how your document is structured and how parts of your document relate. It’s very <a href=\"http://medium.com/alistapart/writing-html-with-accessibility-in-mind-a62026493412\">important to have a sound document outline</a>, it’s good for SEO and it helps screen reader users navigate your site. It may happen that you have to implement a design where there are no headings even though it would make sense to have them. That’s often the case when the design itself conveys structure. In such a case, you don’t simply remove headings from the markup, but you hide them visually. It must be clear how your document is structured with or without CSS.<br />This is of course just one example, visually hiding labels in forms is another one (even tough from a UX perspective<a href=\"https://www.nngroup.com/articles/form-design-placeholders/\"> you shouldn’t hide labels</a>).\n</h6><p>In CSS there are several ways of hiding content and it’s up to you to choose the right technique for the right scenario.</p>\n<h2>Hiding content from everyone</h2>\n<p>By using the hidden attribute or setting visibility: hidden and/or display: none you hide content completely. Users can’t see it and screen readers or search engines can’t read it.</p>\n<h2>Hiding content visually</h2>\n<p>Hiding content only visually isn’t that easy. You have to make sure that it’s still accessible to screen readers, you have to deal with browser quirks and you have to decide what happens when the element is focused. Of course, people already did that and there are solutions you can use.</p>\n<p>I did some <a href=\"https://codepen.io/matuzo/pen/dRzzGv\">research</a> and as it turns out there are many different approaches. That’s why <a href=\"https://twitter.com/mmatuzo/status/878246196267057152\">I asked some experts</a> about their opinion and I dissected the recommended technique to fully understand what’s happening.</p>\n<p>.visually-hidden {<br />  /* Remove the item from normal flow */<br />  position: absolute;<br />  /* Workaround for falsely pronounced, smushed text */<br />  white-space: nowrap;<br />  /* Set it to the smallest possible size (some screen readers ignore elements with zero height and width) */<br />  width: 1px;<br />  height: 1px;<br />  /* Hide overflowing content after resizing */<br />  overflow: hidden;<br />  /* Reset any property that may change the elements size */<br />  border: 0;<br />  padding: 0;<br />  /* Clipping defines what part of an element should be displayed. */<br />  /* Deprecated clip property for older browsers */<br />  clip: rect(0 0 0 0);<br />  /* clip-path for newer browsers. inset(50%) defines an inset rectangle that makes the content disappear.  */<br />  clip-path: inset(50%); <br />    /* It seems like at the moment nobody is quite sure why margin: -1px is there. On top of that it seems to cause issues (see: <a href=\"https://github.com/h5bp/html5-boilerplate/issues/1985).\">https://github.com/h5bp/html5-boilerplate/issues/1985).</a> */<br />  margin: -1px;<br />}</p>\n<p>Save this class somewhere and use it whenever you want to hide content visually and still make is accessible to assistive technology and search engines.</p>\n<p>Skip links</p>\n<p>The class from the preceding section is also suited for usage as a skip link. A skip link is a link that is initially visually hidden, but visible on focus. It should be one of the first items on the page to give screen reader and keyboard users the chance to immediately skip introductory content and jump right to the main content. Basically, it’s just an anchor link that will take the user to a specific part of the page.</p>\n<p><img alt=\"\" height=\"362\" src=\"https://miro.medium.com/freeze/max/60/0*rHLRgRcCEutpb2bD.gif?q=20\" width=\"419\" />A “Skip to content” link is visible on focus</p>\n<p>Try it yourself in this <a href=\"https://codepen.io/matuzo/pen/RZBNjP#content\">Code Pen</a>, press Tab to reveal the skip link.</p>\n<h2>Hiding content semantically</h2>\n<p>Sometimes it makes sense to display content visually, but hide it from screen readers, for example when you’re using icons. It that case add the aria-hidden attribute to the element you want to hide and set it to true.</p>\n<p><br /><span></span><br /><span>Menu</span><br /></p>\n<h2>Others</h2>\n<p>There are other ways of hiding content, like negative text-indent or zero font-size or height. While some of them work, there are certain caveats. Read <a href=\"http://webaim.org/techniques/css/invisiblecontent/#techniques\">Techniques for hiding text</a> on <a href=\"http://webaim.org/\">webaim.org</a> for details.</p>\n<p>Our designs must provide enough contrast between text and background in order to be legible. People with low vision benefit from high contrast as well as people without visual impairments. Just think about using your smartphone outside on a sunny day.</p>\n<h2>What is color contrast and why is it important</h2>\n<p>According to the <a href=\"http://www.who.int/blindness/en/\">World Health Organization</a> about 4% of the population are visually impaired. 7 to 12% of men and less than 1% of women have some form of color-vision deficiency. Many of those impairments reduce sensitivity to contrast, and in some cases the ability to distinguish colors.</p>\n<p>Two colors are contrasting when they’re from different segments of the color wheel. Broadly speaking, the bigger the difference of two colors the higher the contrast. For us as web designers and developers it’s not just about contrast by itself, but how well it works applied to text. The contrast between text and its background must at least be high enough so that it can be read by people with moderately low vision. Of course, we don’t have to guess if we meet this criterion, the <a href=\"https://www.w3.org/WAI/\">Web Accessibility Initiative (WAI)</a> has defined a ratio for measuring it.</p>\n<h2>The minimum contrast ratio</h2>\n<p>The contrast ratio tells how high the contrast for text in certain sizes and widths on a specific background is. The ratio can range from 1:1 to 21:1. It’s 1:1 if both compared colors are the same and 21:1 if black and white are the colors in opposition.</p>\n<p><img alt=\"\" height=\"618\" src=\"https://miro.medium.com/max/60/0*qtktww4-uNco582P.png?q=20\" width=\"1200\" />A ratio of 3.3:1 for a text in #777777 on a #DDDDDD background. (Source: <a href=\"http://leaverou.github.io/contrast-ratio/\">contrast ratio</a>)</p>\n<p>According to the <a href=\"https://www.w3.org/TR/WCAG20/\">Web Content Accessibility Guidelines (WCAG) 2.0</a> we must ensure that a <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G18.html\">contrast ratio of at least 4.5:1</a> exists between a background and its text (or images of text). This applies for text that is less than 24px (if not bold) and less than 19px (if bold). For larger text a ratio of 3:1 is sufficient. Those are the minimum numbers to meet level AA criteria. To pass level AAA the minimum ratio for normal text is <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html\">7:1 and 4.5:1</a> for bold text. It’s no required for conformance, but if we’re using icons we should try to use icons that meet the contrast provisions for text.</p>\n<p>I told my friend <a href=\"https://twitter.com/lctdnl\">Daniel</a> about the ratio and that it’s important that we get it right on a project we’re currently working on. After tinkering with different combinations, he called me and said that this was harder than he thought. The issue isn’t that there aren’t enough visually pleasing combinations, but that in the last years designer have gotten used to using low contrast pairings. Small agencies as well as big companies, like <a href=\"https://www.wired.com/2016/10/how-the-web-became-unreadable/\">Apple or Google</a>, are guilty of following this unfavorable design trend.</p>\n<blockquote>\n<p>Though age has indeed taken its toll on my eyesight, it turns out that I was suffering from a design trend.</p>\n</blockquote>\n<p><a href=\"https://www.wired.com/2016/10/how-the-web-became-unreadable/\">Kevin Marks</a></p>\n<p>There’s a <a href=\"https://www.w3.org/TR/WCAG20/#contrast-ratiodef\">formula for calculating the contrast ratio</a>, but don’t worry, you don’t have to dig out your old calculator. There are tools.</p>\n<h2>Measuring contrast ratio</h2>\n<p>In Chrome Canary it’s possible to display the contrast ratio directly in Dev Tools. Remy Sharp shares how in <a href=\"https://remysharp.com/2017/08/17/contrast-ratio-in-devtools\">a blog post</a>.</p>\n<p><img alt=\"\" height=\"1200\" src=\"https://miro.medium.com/max/60/0*jxW2YgkXxC1bCDBi.png?q=20\" width=\"1200\" />Contrast ratio in Chrome’s Dev Tools.</p>\n<p>There are many tools for testing color contrast and accessibility in general. The following list isn’t extensive, but a small collection of tools I prefer.</p>\n<p>Online</p>\n<ul><li>\n<a href=\"http://leaverou.github.io/contrast-ratio/#blue-on-red\">contrast ratio</a> by <a href=\"http://lea.verou.me/\">Lea Verou</a><br />Quick and easy contrast checker in the browser</li>\n<li>\n<a href=\"https://snook.ca/technical/colour_contrast/colour.html#fg=33FF33,bg=333333\">Colour Contrast Check</a> by <a href=\"https://snook.ca/\">Jonathan Snook</a><br />Contrast checker in the browser with some more options</li>\n<li>\n<a href=\"http://wave.webaim.org\">Wave tool</a><br />Browsertool for checking contrast and more</li>\n<li>\n<a href=\"http://kevingutowski.github.io/color.html\">Accessible Color Spaces</a> by Kevin Gutowski<br />Color picker with automatic contrast check</li>\n</ul><p>Browserextensions and DevTools</p>\n<ul><li>\n<a href=\"https://www.youtube.com/watch?v=b0Q5Zp_yKaU&amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g\">Chrome DevTools Audits Panel</a><br />Chrome 60 shipped with a new audits panel, powered by Lighthouse. Among others it gives sites accessibility scores and lists issues.</li>\n<li>\n<a href=\"http://khan.github.io/tota11y/\">tota11y</a><br />Great browser extension for testing contrast, the document outline and more.</li>\n<li>\n<a href=\"https://chrome.google.com/webstore/detail/axe/lhdoppojpmngadmnindnejefpokejbdd\">aXe</a><br />“Automated tool to find Accessibility defects on your web site by using the aXe Chrome extension.”</li>\n</ul><p>Others</p>\n<ul><li>\n<a href=\"https://github.com/getflourish/Sketch-Color-Contrast-Analyser\">Color Contrast Analyser for Sketch</a><br />“A Sketch plugin that calculates the color contrast of two layers and evaluates it against the WCAG.”</li>\n<li><a href=\"http://www.webaxe.org/color-contrast-tools/\">More color contrast tools</a></li>\n</ul><h2>High contrast experiences</h2>\n<p>Using high contrasting colors is great, but people who have low vision still may want to alter the colors used by websites. There are many <a href=\"https://www.w3.org/TR/low-vision-needs/#user-needs\">different user needs</a> and accordingly there is also a variety of <a href=\"https://accessibility.blog.gov.uk/2017/03/27/how-users-change-colours-on-websites/\">methods for changing colors</a> available. That fact entails a certain unpredictability and makes it hard for us to make sure that our pages are always fully accessible. That’s why we shouldn’t just rely on meeting level AA or AAA criteria for contrast, but also test our websites thoroughly and consider providing high contrast alternatives.</p>\n<p>High contrast mode on Windows</p>\n<p>On Windows there’s a <a href=\"https://support.microsoft.com/en-us/help/4026951/windows-turn-high-contrast-mode-on-or-off-in-windows\">high contrast option in the settings</a>. Users may define their own color settings or choose a predefined theme.</p>\n<p><img alt=\"\" height=\"1015\" src=\"https://miro.medium.com/max/60/0*2aPsF3bwXl5fZuBd.png?q=20\" width=\"1200\" />High contrast settings in Windows</p>\n<p>I made a simple login form (the first of four screenshots; inspired by: <a href=\"https://dribbble.com/shots/1687064-Simple-Login-Form\">https://dribbble.com/shots/1687064-Simple-Login-Form</a>) and tested it with different high contrasting themes.</p>\n<p><img alt=\"\" height=\"244\" src=\"https://miro.medium.com/max/60/0*0BWG55TdsZnDBiik.jpg?q=20\" width=\"1200\" />A login form in different high contrast settings</p>\n<p>Anika Henke wrote about <a href=\"https://accessibility.blog.gov.uk/2017/03/27/how-users-change-colours-on-websites/\">how users change colors on websites</a>. She describes that while testing a form she discovered that <a href=\"https://github.com/alphagov/govuk_elements/pull/397\">input fields became invisible</a> and <a href=\"https://github.com/alphagov/govuk_frontend_toolkit/pull/377\">buttons unrecognizable</a>. You can see the same thing happening in the above screenshot. If it wasn’t for the placeholder text, users wouldn’t know that there are two input fields. A quick fix was to add a default border for inputs and buttons (not tested across browsers).</p>\n<p><img alt=\"\" height=\"244\" src=\"https://miro.medium.com/max/60/0*5fii26pptxjctmx1.jpg?q=20\" width=\"1200\" />An improved login form with borders on inputs and buttons in different high contrast settings</p>\n<p>You can use media queries to detect if high contrast mode is active and provide specific styles.</p>\n<p>/* High contrast mode active */<br />@media (-ms-high-contrast:active) {<br />}/* High contrast mode with specific black on white theme */<br />@media (-ms-high-contrast:black-on-white) {<br />}/* High contrast mode with specific white on black theme */<br />@media (-ms-high-contrast:white-on-black) {<br />}</p>\n<p><a href=\"https://twitter.com/patrick_h_lauke\">Patrick H. Lauke</a> shares his thoughts and concerns about those media features in <a href=\"https://www.paciellogroup.com/blog/2016/12/windows-high-contrast-mode-the-limited-utility-of-ms-high-contrast/\">Windows High Contrast Mode: the limited utility of -ms-high-contrast</a>. In response <a href=\"http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast\">Greg Whitworth pointed out</a> that the feature’s “sole purpose is to aid in providing users with contrast sensitivity a better experience. As such, you shouldn’t necessarily care about what the specific color is. To some extent, you shouldn’t even care how your site looks; but how it functions in high contrast.”.</p>\n<p>High contrast Chrome extension</p>\n<p>There’s also a <a href=\"https://chrome.google.com/webstore/detail/high-contrast/djcfdncoelnlbldjfhinnjlhdjlikmph?hl=en-US\">high contrast extension for Google Chrome</a> that lets users browse the web with several high-contrast color filters designed to make it easier to read text.</p>\n<p>High contrast alternatives</p>\n<p>If there are parts of your design that don’t have sufficient contrast, it is still possible to meet WCAG criteria using the <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G174.html#G174-description\"><em>Alternate Version</em> clause</a>. According to that you must provide users with either a link to a high contrast version of the page or a control on the page that can change the page so that all aspects conform.</p>\n<p>There are some criteria for this alternative:</p>\n<ul><li>The link or control must be placed prominently on the page.</li>\n<li>The link or control must itself meet the contrast requirement.</li>\n<li>The new page must contain all the same information and functionality as the original page.</li>\n<li>The new page must meet all the desired criteria.</li>\n</ul><h2>Testing with NoCoffee</h2>\n<p><img alt=\"\" height=\"1200\" src=\"https://miro.medium.com/max/60/0*1vQ04OwDBN6Q9P4x.png?q=20\" width=\"1200\" />NoCoffee simulates low vision, color deficiencies and blocked visual fields</p>\n<p>Meeting the criteria is one thing, but testing with real people is another. Not all of us have the means for professional testing. Fortunately, <a href=\"https://chrome.google.com/webstore/search/NoCoffee%20Vision%20Simulator?hl=en&amp;gl=US\">NoCoffee</a> provides us with a quick and easy way for simulating low vision, color deficiencies and blocked visual fields. It can be helpful for understanding the problems faced by people with slight to extreme vision problems.</p>\n<p>As already mentioned, a very high percentage of men have color vision deficiencies. There are different types too. Deuteranomaly, one of the most common, makes it difficult to differentiate between red and green. We should <a href=\"http://www.particletree.com/features/interfaces-and-color-blindness/\">avoid using colors alone as visual cues</a> because interfaces may become unusable for people with color vision deficiency.</p>\n<p>I took the form from the previous example and added borders to the input fields to indicate success and error states. The following screenshot shows that color alone doesn’t suffice for giving users feedback. The border colors are either not visible at all or wrong.</p>\n<p><img alt=\"\" height=\"244\" src=\"https://miro.medium.com/max/60/0*j6Ao9ijKUk5FrDVB.jpg?q=20\" width=\"1200\" />Differentiating success and failure in forms by color alone doesn’t work in high contrast mode.</p>\n<p>Adding <a href=\"https://aerolab.co/blog/web-accessibility/#color\">simple icons may help</a> to improve the accessibility and user experience.</p>\n<p>Another example are links. They also shouldn’t differentiate from normal text by color alone. It’s best to <a href=\"http://adrianroselli.com/2016/06/on-link-underlines.html\">keep underlines on links</a>.</p>\n<p>There are numerous ways of changing the order in which items are laid out. For example, there’s order and flex-direction for Flexbox or order, flex-auto-flow and of course explicit placement for Grid. While those properties are really helpful, they may create a <a href=\"https://tink.uk/flexbox-the-keyboard-navigation-disconnect/\">disconnect between the DOM order and visual presentation</a> of content.</p>\n<p>In the following example you can see a gallery, in which the images have been positioned using several grid properties.</p>\n<p>At first glance, there doesn’t seem to be an issue, but when you use the keyboard to jump from image to image, you will see that the order is completely unpredictable. There’s no way of knowing which image will be highlighted next, when you press the Tab key. Now combine that with missing focus styles and you’ve created the perfect worst case scenario.</p>\n<p>Unpredictable or wrong order doesn’t just concern keyboard users. Screen readers announce contents in DOM order, the software is not affected by ordering in CSS, but its users are. You might think that screen reader users don’t care about the visual representation of content. That’s not always the case because <a href=\"http://adrianroselli.com/2017/02/not-all-screen-reader-users-are-blind.html\">not all screen reader users are blind</a>. Some have low vision or learning disabilities and use screen readers to supplement what they see on the screen.</p>\n<p>Those ordering issues don’t just apply for flex- or grid-items, but for any sort of positioning. It’s important to order content in a way where it makes sense without styles and then check if it corresponds with the order in the design. If not, you may have to rethink your design. Whatever you do don’t blindly reorder elements in your markup just because you’re not able to position them in CSS correctly.</p>\n<p>Watch <a href=\"https://twitter.com/rob_dodson\">Rob Dodson’s</a> <a href=\"https://www.youtube.com/watch?v=8MAvH6vYbDo&amp;feature=em-subs_digest\">Does reordering content affect accessibility?</a> and read Adrian Roselli’s <a href=\"http://adrianroselli.com/2015/09/source-order-matters.html\">Source Order Matters</a> for more details.</p>\n<p>I’ve already written about keyboard navigation basics and focusable elements in <a href=\"http://medium.com/@matuzo/writing-javascript-with-accessibility-in-mind-a1f6a5f467b9\">Writing Javascript with Accessibility in Mind</a>. Before you keep reading jump to that article real quick if you’re completely new to the topic.</p>\n<p>It’s important to make sure that your websites are navigable by keyboard. A lot of users rely on a keyboard when they surf the web. Among them are people with motor disabilities, blind people and people who don’t have hands or cannot use a mouse or track pad for whatever reason.</p>\n<p>There are several things you can do in CSS to provide styles for focusable elements.</p>\n<h2>Selecting focused items</h2>\n<p>You can select <a href=\"https://allyjs.io/data-tables/focusable.html\">focusable items</a> in their focus state by using the :focus pseudo-class and apply styles to them.</p>\n<p>a:focus {<br />  background-color: #000000;<br />  color: #FFFFFF; <br />}</p>\n<p>Default focus styles are not very consistent across browsers, often ugly and in some cases they <a href=\"http://adrianroselli.com/2017/02/avoid-default-browser-focus-styles.html\">do not play well with your design</a>. It’s advised to provide custom focus styling that improves the user experience and fits your design.</p>\n<p>Whatever you do, <a href=\"http://www.outlinenone.com/\">don’t just remove the default outline</a> (dotted outline, blue or orange ring) without providing alternate styles. Users who depend on the keyboard as their primary way of navigation won’t be able to use your site, if they don’t know where the focus is.</p>\n<p><img alt=\"\" height=\"350\" src=\"https://miro.medium.com/max/60/0*87H0RkGyYO7cT-hf.png?q=20\" width=\"1200\" />Don’t remove default focus styles without providing alternatives (Source: <a href=\"http://www.outlinenone.com/\">outlinenone.com</a>)</p>\n<p>That’s not just a tip, but a <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-visible.html\">level AA criterion</a>.</p>\n<h2>Differentiating between keyboard and mouse users</h2>\n<p>As already mentioned, one of the things that frustrates designers is that there are a lot of <a href=\"https://allyjs.io/tests/focus-outline-styles/index.html#style=focus&amp;key=text,radio,checkbox,textarea,button,link,div&amp;browser=firefox,chrome,safari,ie11\">inconsistencies between browser when it comes to focus styles</a>. Another source of frustration is that focus styles are also visible when users use the mouse on some focusable elements. Sometimes it’s not necessary to show them, it might even be distracting for mouse users and aesthetically unpleasant.</p>\n<p><img alt=\"\" height=\"822\" src=\"https://miro.medium.com/max/60/0*gZJRNP6GtlghkOn2.png?q=20\" width=\"1200\" />A custom tab component that shows a blue outline in Chrome when the content area has been clicked (Source: <a href=\"https://frend.co/components/tabs/\">frend.co</a>)</p>\n<p>Removing the outline property is not an option because then the component wouldn’t be accessible to keyboard users anymore. What we need is a way to differentiate between keyboard and mouse usage. That will be possible with the :focus-ring pseudo-class which is part of the <a href=\"https://drafts.csswg.org/selectors-4\">CSS Level 4 selectors</a> specification. “The :focus-ring pseudo-class applies while an element matches the:focus pseudo-class, <em>and</em> the UA determines via heuristics that the focus should be specially indicated on the element (typically via a “focus ring”).” (Source: <a href=\"https://drafts.csswg.org/selectors-4/#the-focusring-pseudo\">CSS Selectors Level 4 Draft</a>)</p>\n<p>/* Remove the default outline */<br />:focus {<br />  outline: none;<br />}</p>\n<p>/* Add an outline only when it should be visible */</p>\n<p>:focus-ring {<br />  outline: 2px solid blue;<br />}</p>\n<p>Unfortunately, at the moment no browsers support the standard implementation of :focus-ring (Firefox supports <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/%3A-moz-focusring\">-moz-focus-ring</a>), but there is a <a href=\"https://github.com/WICG/focus-ring\">lightweight poly-fill</a> that will add a .focus-ring class when appropriate.</p>\n<p>/* If JavaScript is active and works, select all focusable elements that do not have the .focus-ring class and remove the outline */.js-focus-ring :focus:not(.focus-ring) {<br />    outline-width: 0;<br />}</p>\n<p>For more details watch Rob Dodson’s <a href=\"https://www.youtube.com/watch?v=ilj2P5-5CjI&amp;index=5&amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g\">a11ycasts episode, <em>Focus Ring!</em></a></p>\n<h2>Styling elements with focused children</h2>\n<p>:focus-within is a relatively new pseudo class and already <a href=\"http://caniuse.com/#feat=css-focus-within\">supported in most major browsers</a>. It lets you select an element which has child elements that are currently focused.</p>\n<p><img alt=\"\" height=\"247\" src=\"https://miro.medium.com/freeze/max/60/0*LCxl7Sx7ostMw4ZG.gif?q=20\" width=\"337\" />A form which has a drop shadow if one of its child items is focused.form:focus-within {<br />  box-shadow: 0 0 4px 6px rgba(80,88,156,0.2);<br />}</p>\n<p>You can see that in action on <a href=\"https://s.codepen.io/matuzo/debug/MvPddP\">CodePen</a>.</p>\n<p>For more details on focus basics watch <a href=\"https://www.youtube.com/watch?v=EFv9ubbZLKw&amp;index=18&amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g\">What is Focus?</a> on YouTube.</p>\n<p>When we’re building a new site we usually start by writing HTML. We choose the right mark-up and put elements in logical order. When the document is valid, well-structured and the order makes sense we add CSS. Before CSS Grid Layout, making layouts could get very tricky, especially when DOM order and the order in the design didn’t correspond. float, position and sometimes even Flexbox were in some situations not flexible enough and we would get tempted to change DOM order. Thanks to Grids explicit placement and its areas we have all the flexibility we need to position items. This is great, but Grid also introduces a new temptation that could comprise our document structure.</p>\n<p>Let’s say you have the following design and you use a h2 and a ul for those items because that’s what makes the most sense for you.</p>\n<p><img alt=\"\" height=\"236\" src=\"https://miro.medium.com/max/60/0*m7b7MyTjSmcPTa0U.png?q=20\" width=\"863\" />A layout with a heading and a list</p>\n  \n<h2>Heading</h2>\n<p>  </p>\n<ul><li><a href=\"https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/#\">Element 1</a></li>\n</ul><p>    </p>\n<a href=\"https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/#\">Element 2</a>\n<p>    </p>\n<a href=\"https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/#\">Element 3</a>\n<p>    </p>\n<a href=\"https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/#\">Element 4</a>\n<p>    </p>\n<a href=\"https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/#\">Element 5</a>\n<p>    </p>\n<a href=\"https://scoutblockchain.com/writing-css-with-accessibility-in-mind-manuel-matuzovic/#\">Element 6</a>\n<p>  </p>\n<p></p>\n\n<p>Putting those elements in columns and positioning the </p>\n<h2> is fairly easy,.. or at least it seems like it is.\n</h2><p>.wrapper {<br />  display: grid;<br />  grid-template-columns: 120px repeat(2, 1fr);<br />  grid-gap: 20px;<br />}h2 {<br />  grid-column: 2 / -1;<br />}<img alt=\"\" height=\"372\" src=\"https://miro.medium.com/max/60/0*7ShmPNm7Y6qYovRM.png?q=20\" width=\"863\" />A layout with a heading and a list. Only direct children of a grid container are laid out on the grid.</p>\n<p>That doesn’t look exactly like expected. The problem is that only direct children of a grid container are laid out on the grid, which in that case are </p>\n<h2> and \n</h2><ul><li>, but you want the \n</li><li>s to act as grid items. The worst solutions for this is flattening the structure and getting rid of the\n<ul><li> and transforming the \n</li><li> to\ns so that they’re direct children of the grid container.\n<p>The best solution would be to set the display property of the </p>\n<ul><li> to subgrid, but unfortunately subgrid didn’t make it into Level 1 of the specification and we have to wait some more until it ships.\n</li></ul><p>You could use display: contents on the </p>\n<ul><li>, but Firefox is currently the only browser that </li></ul><a href=\"http://caniuse.com/#feat=css-display-contents\">supports it</a>. display: contents causes an element’s children to appear as if they were direct children of the element’s parent, ignoring the element itself.\n<p>Ultimately, you have to define another grid for the </p>\n<ul><li>. This isn’t ideal, but still better than flattening the structure of your document and compromising semantics. Since this is a very basic example and the list spans the whole grid, you can inherit some values from the parent grid.\n</li></ul><p>ul {<br />  /* span the whole grid */<br />  grid-column: 1 / -1;  /* create another grid and inherit the values from the parent grid */<br />  display: inherit;<br />  grid-template-columns: inherit;<br />  grid-gap: inherit;  /* overwrite display for browsers that understand display: contents */<br />  display: contents;<br />}</p>\n<p>You can see both solutions in action on <a href=\"https://codepen.io/matuzo/pen/zdarLX\">CodePen</a>.</p>\n<p>Even though this post covers quite a few things, it’s by far not everything you need to know about CSS and accessibility. On the other hand, it’s also more than just a starting point. By getting DOM and focus order right and by caring about high contrast and generally by designing with accessibility in mind, you’re already doing a great job. If you put a little more accessibility consideration in every new page or site you’re making, you’re making the web a better place.</p>\n<blockquote>\n<p><em>Designing with constraints in mind is simply designing well.</em></p>\n</blockquote>\n<p><a href=\"https://channel9.msdn.com/Events/WebPlatformSummit/edgesummit2016/ES1612\"><em>Aaron Gustafson</em></a></p>\n<p>I hope that you’ve enjoyed reading and learned something new. If you have questions or any sort of feedback, please leave a comment or contact me via <a href=\"http://twitter.com/mmatuzo\">twitter</a>.</p>\n<p>Thanks to my mentor <a href=\"https://twitter.com/AaronGustafson\">Aaron Gustafson</a> for helping me with this article.</p>\n<p>This article is the third in a series of four. The last one is in the works and soon to be released.</p>\n</li></ul></li></ul><ol><li><a href=\"http://medium.com/@matuzo/writing-html-with-accessibility-in-mind-a62026493412\">Writing HTML with accessibility in mind</a></li>\n<li><a href=\"http://medium.com/@matuzo/writing-javascript-with-accessibility-in-mind-a1f6a5f467b9\">Writing JavaScript with accessibility in mind</a></li>\n<li>Writing CSS with accessibility in mind</li>\n<li>Up next: Learn how to design and develop with accessibility in mind</li>\n</ol><p>Thank you for reading and please don’t forget to like and share this article if you enjoyed it.</p>\n<p>While I work on the next post, you can check out some other stuff I wrote:</p>\n<h2>From legible to readable text</h2>\n<ul><li>\n<a href=\"https://blog.marvelapp.com/body-text-small/\">Your Body Text Is Too Small</a> by Christian Miller</li>\n<li>\n<a href=\"https://www.wired.com/2016/10/how-the-web-became-unreadable/\">How the Web Became Unreadable</a> by Kevin Marks</li>\n<li>\n<a href=\"https://zellwk.com/blog/why-vertical-rhythms/\">Why is Vertical Rhythm an Important Typography Practice?</a> by Zell Liew</li>\n<li>\n<a href=\"https://madebymike.com.au/writing/precise-control-responsive-typography/\">Precise control over responsive typography</a> by Mike Riethmuller</li>\n</ul><h2>Using content in pseudo elements cautiously</h2>\n<ul><li>\n<a href=\"https://tink.uk/accessibility-support-for-css-generated-content/\">Accessibility support for CSS generated content</a> by Léonie Watson</li>\n</ul><p>The screen is not the only medium</p>\n<ul><li>\n<a href=\"https://uxdesign.cc/i-totally-forgot-about-print-style-sheets-f1e6604cfd6\">I totally forgot about print style sheets</a> by Manuel Matuzović</li>\n</ul><p>Fallback for property values with incomplete support</p>\n<ul><li>\n<a href=\"https://justmarkup.com/log/2017/02/css-and-progressive-enhancement/\">CSS and progressive enhancement</a> by Michael Scharnagl</li>\n</ul><p>There are many ways to hide content</p>\n<ul><li><a href=\"http://webaim.org/techniques/css/invisiblecontent/#techniques\">Techniques for hiding text</a></li>\n<li>\n<a href=\"http://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\">Beware smushed off-screen accessible text</a> by J. Renée Beach</li>\n<li><a href=\"https://allyjs.io/tutorials/hiding-elements.html#2017-edition-of-visuallyhidden\">a11y.js: Hiding DOM elements</a></li>\n<li>\n<a href=\"https://www.filamentgroup.com/lab/bulletproof_icon_fonts.html\">Bulletproof Accessible Icon Fonts </a>by Zach Leatherman</li>\n</ul><p>You can’t trust bad contrast</p>\n<ul><li>\n<a href=\"https://accessibility.blog.gov.uk/2017/03/27/how-users-change-colours-on-websites/\">How users change colours on websites</a> by Anika Henke</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/\">Color Contrast And Why You Should Rethink It</a> by Cathy O’ Connor</li>\n<li>\n<a href=\"http://a11yproject.com/posts/what-is-color-contrast/\">What is Color Contrast?</a> by Rachel R. Vasquez</li>\n<li>\n<a href=\"https://www.thoughtco.com/contrasting-colors-in-design-1078274\">A Beginner’s Guide to Contrasting Colors </a>by Jacci Howard Bear</li>\n</ul><p>Color alone should not be the only source of information</p>\n<ul><li>\n<a href=\"http://www.particletree.com/features/interfaces-and-color-blindness/\">Be Kind to the Color Blind</a> by Chris Champbell</li>\n<li>\n<a href=\"http://adrianroselli.com/2016/06/on-link-underlines.html\">On Link Underlines</a> by Adrian Roselli</li>\n</ul><p>Taking care of order</p>\n<ul><li>\n<a href=\"http://adrianroselli.com/2017/02/not-all-screen-reader-users-are-blind.html\">Not All Screen Reader Users Are Blind</a> by Adrian Roselli</li>\n<li>\n<a href=\"http://adrianroselli.com/2015/09/source-order-matters.html\">Source Order Matters</a> by Adrian Roselli</li>\n</ul><p>Focus on what’s important: focus</p>\n<ul><li><a href=\"https://allyjs.io/tests/focus-outline-styles/index.html#style=focus&amp;key=text,radio,checkbox,textarea,button,link,div&amp;browser=firefox,chrome,safari,ie11\">a11y.js: Default Browser Focus Outline Styles</a></li>\n<li>\n<a href=\"http://kizu.ru/en/blog/keyboard-only-focus/#x\">Keyboard-Only Focus</a> by Roman Komarov</li>\n</ul><p>Grid and flat document structures</p>\n<ul><li>\n<a href=\"https://rachelandrew.co.uk/archives/2015/07/28/modern-css-layout-power-and-responsibility/\">Modern CSS Layout, power and responsibility</a> by Rachel Andrew</li>\n</ul><p> <a href=\"https://medium.com/@matuzo/writing-css-with-accessibility-in-mind-8514a0007939\">Source</a></p>",
        "text": "I made my first website about 17 years ago when CSS was still relatively new. Since then a lot of things have changed and CSS now gives us an incredible set of tools to style the web. We went from Verdana to Webfonts, from fixed widths to Responsive Web Design, from table-based layouts to Grid, and we don’t have to use images anymore for borders, fonts or shadows. We have custom properties, Feature Queries, calc() and numerous new units. This of course is only a subset of the great developments of the last years.\nWriting CSS with Accessibility in Mind\nWhile this wide range of properties and endless ways of solving tasks with CSS makes our lives easier, it also creates the potential to worsen the experience for our users. It’s actually possible to make a website inaccessible in just three lines of CSS.\nIn this post I’ve collected techniques, considerations and approaches that will help you write more accessible CSS. The collection starts with basic concepts and well-known properties and covers some of the newer stuff at the end.\nIn the end it got way bigger than expected, so here’s a handy menu so you can jump directly to a section that interests you the most:\nFrom legible to readable text\nUsing content in pseudo elements cautiously\nThe screen is not the only medium\nFallback for property values with incomplete support\nThere are many ways to hide content\nYou can’t trust bad contrast\nColor alone should not be the only source of information\nTaking care of order\nFocus on what’s important: focus\nGrid and flat document structures\nEnjoy!\nImages, icons and videos are an integral part in today’s web design, but text still makes up the majority of content on most websites. It’s important to spend a good amount of time styling, testing and fine-tuning font properties because text must be readable no matter the device.\nIncreasing font size\nFont size should increase with the user’s distance from the screen (Source: Marvel)\nThere was a time were a 12px font size for body text was standard, but with the rise of devices with higher resolutions the average font size settled somewhere between 15 and 18px for a while. In recent years, it has risen again to 20px and up, which is a good thing. Text must be big enough for reading on smartphones and increase with the size of the screen in order to still be readable from distance on big screens like TVs.\nAs the characteristics of typefaces may differ a lot, it doesn’t make sense to define a standard minimum size, but 18–20px probably is a good starting point for smaller screen sizes. \nOf course, there’s a lot more to say about font size, but that would be too much for this article. I suggest you read Your Body Text Is Too Small by Christian Miller for more details.\nSetting line height\nThe default line height in browsers is at roughly 1.2. According to the Web Content Accessibility Guidelines it should be at least 1.5 within paragraphs in blocks of text.\nA paragraph with a line-height of 1.2 compared to a paragraph with a line-height of 1.5\nText within a paragraph with adjusted line height isn’t just better readable, but often also visually more appealing.\nAligning text to the left or right\nIrregular word spacing in justified text\nEven though some of us may prefer justified over left or right aligned text because it looks nicer, it’s considered bad practice. text-align: justify modifies word spacing to create same length lines. Those uneven spaces can harm readability and be very distracting. Breaking up words when necessary could be a solution, but CSS Hyphenation isn’t well supported and might not work as expected.\nDefining paragraph widths\nAccording to several sources designers should strive for 45 to 85 characters per line since the ideal width for a paragraph is supposedly 65 characters.\nWhen defining widths of text blocks the ch unit may come in handy since 1ch is equivalent to the width of the zero (0) character. It also changes as the font-family or font-size changes.\np {\n  /* Maximum width of 65characters */\n  max-width: 65ch;\n}\nIf you are using any type of responsive typography technique make sure test your site on very large screens. If there’s no limit to your font sizes, text may become unreadable at a certain viewport size. If you want to know how to set limits or if you’re unfamiliar with responsive typography, read Mike Riethmullers article Precise control over responsive typography.\nWe can use the pseudo elements ::before and ::after to add CSS at the very beginning or at the very end of an element. It gives us a pretty common and handy way of adding design elements to our components, but it also allows to add content using the content property. In the sense of the separation of concerns we shouldn’t do that.\nh2 {\n  content: “DON’T DO THIS”;\n}\nOur content should be in HTML files, in a database, or coming from an API, but not in our CSS. Sometimes we use the content property for adding non-text content like font icons or special characters. If we do that, we need to remember that some screen readers recognize and announce generated content. If the generated content is purely presentational, make sure to hide it from assistive technology, for example by using aria-hidden.\n\nEven though we live in a digital age, people still print stuff. Make sure that your pages are accessible and usable even when printed out our saved as PDF. All you have to do is to add a @media block to your CSS and tweak the styling of elements that don’t look right or hide those that don’t make sense on paper, like navigation or ads.\n@media print {\n  .header {\n    position: static;\n  }  nav {\n    display: none;\n  }\n}\nOne of the issues with printed web pages is that links are completely useless because you don’t know where they’re are leading. Luckily CSS gives us a way of revealing the values of attributes and showing them on screen (or paper in this case).\n@media print {\n  a[href^=”http”]:not([href*=”mywebsite.com”])::after {\n    content: ” (” attr(href) “)”;\n  }\n}\nThese lines will display the value of the href attribute next to every link that has a href attribute, which starts with http, but doesn’t have mywebsite.com in its value.\nFirefox and especially Chrome offer tools for testing and debugging print style sheets.\nIf you want to dig deeper, I’ve collected a number of tips and tricks for working with print styles.\nSometimes we find ourselves in a situation where we want to use a certain property value but can’t because it’s not supported in some browsers. That shouldn’t stop us from using it as long as we provide a fallback. Often we don’t even need Feature Queries or any other feature detection to do that. \nLet’s say you want to use the vmax unit, which IE and older versions of Edge don’t understand.\ndiv {\n  width: 50vmax; /* Doesn’t work in IE and older versions of Edge */\n}\nIn order to provide a fallback, you simply set the width property to something less ideal, but something the browser will understand, e.g. width: 50vw. In the next line you set it to the actual value you want.\ndiv {\n  width: 50vw;\n  width: 50vmax;\n}\nBrowsers that don’t understand vmax will interpret width: 50vw and simply skip width: 50vmax. On the other hand, browsers that do understand it will first interpret width: 50vw and then width: 50vmax. Since the vmax declaration comes after the vw declaration, the vmax version is what users will get.\nHeadings in HTML are very useful when it comes to outlining a document. By using headings \n – \n you tell the browser and other software how your document is structured and how parts of your document relate. It’s very important to have a sound document outline, it’s good for SEO and it helps screen reader users navigate your site. It may happen that you have to implement a design where there are no headings even though it would make sense to have them. That’s often the case when the design itself conveys structure. In such a case, you don’t simply remove headings from the markup, but you hide them visually. It must be clear how your document is structured with or without CSS.\nThis is of course just one example, visually hiding labels in forms is another one (even tough from a UX perspective you shouldn’t hide labels).\nIn CSS there are several ways of hiding content and it’s up to you to choose the right technique for the right scenario.\nHiding content from everyone\nBy using the hidden attribute or setting visibility: hidden and/or display: none you hide content completely. Users can’t see it and screen readers or search engines can’t read it.\nHiding content visually\nHiding content only visually isn’t that easy. You have to make sure that it’s still accessible to screen readers, you have to deal with browser quirks and you have to decide what happens when the element is focused. Of course, people already did that and there are solutions you can use.\nI did some research and as it turns out there are many different approaches. That’s why I asked some experts about their opinion and I dissected the recommended technique to fully understand what’s happening.\n.visually-hidden {\n  /* Remove the item from normal flow */\n  position: absolute;\n  /* Workaround for falsely pronounced, smushed text */\n  white-space: nowrap;\n  /* Set it to the smallest possible size (some screen readers ignore elements with zero height and width) */\n  width: 1px;\n  height: 1px;\n  /* Hide overflowing content after resizing */\n  overflow: hidden;\n  /* Reset any property that may change the elements size */\n  border: 0;\n  padding: 0;\n  /* Clipping defines what part of an element should be displayed. */\n  /* Deprecated clip property for older browsers */\n  clip: rect(0 0 0 0);\n  /* clip-path for newer browsers. inset(50%) defines an inset rectangle that makes the content disappear.  */\n  clip-path: inset(50%); \n    /* It seems like at the moment nobody is quite sure why margin: -1px is there. On top of that it seems to cause issues (see: https://github.com/h5bp/html5-boilerplate/issues/1985). */\n  margin: -1px;\n}\nSave this class somewhere and use it whenever you want to hide content visually and still make is accessible to assistive technology and search engines.\nSkip links\nThe class from the preceding section is also suited for usage as a skip link. A skip link is a link that is initially visually hidden, but visible on focus. It should be one of the first items on the page to give screen reader and keyboard users the chance to immediately skip introductory content and jump right to the main content. Basically, it’s just an anchor link that will take the user to a specific part of the page.\nA “Skip to content” link is visible on focus\nTry it yourself in this Code Pen, press Tab to reveal the skip link.\nHiding content semantically\nSometimes it makes sense to display content visually, but hide it from screen readers, for example when you’re using icons. It that case add the aria-hidden attribute to the element you want to hide and set it to true.\n\n\nMenu\n\nOthers\nThere are other ways of hiding content, like negative text-indent or zero font-size or height. While some of them work, there are certain caveats. Read Techniques for hiding text on webaim.org for details.\nOur designs must provide enough contrast between text and background in order to be legible. People with low vision benefit from high contrast as well as people without visual impairments. Just think about using your smartphone outside on a sunny day.\nWhat is color contrast and why is it important\nAccording to the World Health Organization about 4% of the population are visually impaired. 7 to 12% of men and less than 1% of women have some form of color-vision deficiency. Many of those impairments reduce sensitivity to contrast, and in some cases the ability to distinguish colors.\nTwo colors are contrasting when they’re from different segments of the color wheel. Broadly speaking, the bigger the difference of two colors the higher the contrast. For us as web designers and developers it’s not just about contrast by itself, but how well it works applied to text. The contrast between text and its background must at least be high enough so that it can be read by people with moderately low vision. Of course, we don’t have to guess if we meet this criterion, the Web Accessibility Initiative (WAI) has defined a ratio for measuring it.\nThe minimum contrast ratio\nThe contrast ratio tells how high the contrast for text in certain sizes and widths on a specific background is. The ratio can range from 1:1 to 21:1. It’s 1:1 if both compared colors are the same and 21:1 if black and white are the colors in opposition.\nA ratio of 3.3:1 for a text in #777777 on a #DDDDDD background. (Source: contrast ratio)\nAccording to the Web Content Accessibility Guidelines (WCAG) 2.0 we must ensure that a contrast ratio of at least 4.5:1 exists between a background and its text (or images of text). This applies for text that is less than 24px (if not bold) and less than 19px (if bold). For larger text a ratio of 3:1 is sufficient. Those are the minimum numbers to meet level AA criteria. To pass level AAA the minimum ratio for normal text is 7:1 and 4.5:1 for bold text. It’s no required for conformance, but if we’re using icons we should try to use icons that meet the contrast provisions for text.\nI told my friend Daniel about the ratio and that it’s important that we get it right on a project we’re currently working on. After tinkering with different combinations, he called me and said that this was harder than he thought. The issue isn’t that there aren’t enough visually pleasing combinations, but that in the last years designer have gotten used to using low contrast pairings. Small agencies as well as big companies, like Apple or Google, are guilty of following this unfavorable design trend.\n\nThough age has indeed taken its toll on my eyesight, it turns out that I was suffering from a design trend.\n\nKevin Marks\nThere’s a formula for calculating the contrast ratio, but don’t worry, you don’t have to dig out your old calculator. There are tools.\nMeasuring contrast ratio\nIn Chrome Canary it’s possible to display the contrast ratio directly in Dev Tools. Remy Sharp shares how in a blog post.\nContrast ratio in Chrome’s Dev Tools.\nThere are many tools for testing color contrast and accessibility in general. The following list isn’t extensive, but a small collection of tools I prefer.\nOnline\n\ncontrast ratio by Lea Verou\nQuick and easy contrast checker in the browser\n\nColour Contrast Check by Jonathan Snook\nContrast checker in the browser with some more options\n\nWave tool\nBrowsertool for checking contrast and more\n\nAccessible Color Spaces by Kevin Gutowski\nColor picker with automatic contrast check\nBrowserextensions and DevTools\n\nChrome DevTools Audits Panel\nChrome 60 shipped with a new audits panel, powered by Lighthouse. Among others it gives sites accessibility scores and lists issues.\n\ntota11y\nGreat browser extension for testing contrast, the document outline and more.\n\naXe\n“Automated tool to find Accessibility defects on your web site by using the aXe Chrome extension.”\nOthers\n\nColor Contrast Analyser for Sketch\n“A Sketch plugin that calculates the color contrast of two layers and evaluates it against the WCAG.”\nMore color contrast tools\nHigh contrast experiences\nUsing high contrasting colors is great, but people who have low vision still may want to alter the colors used by websites. There are many different user needs and accordingly there is also a variety of methods for changing colors available. That fact entails a certain unpredictability and makes it hard for us to make sure that our pages are always fully accessible. That’s why we shouldn’t just rely on meeting level AA or AAA criteria for contrast, but also test our websites thoroughly and consider providing high contrast alternatives.\nHigh contrast mode on Windows\nOn Windows there’s a high contrast option in the settings. Users may define their own color settings or choose a predefined theme.\nHigh contrast settings in Windows\nI made a simple login form (the first of four screenshots; inspired by: https://dribbble.com/shots/1687064-Simple-Login-Form) and tested it with different high contrasting themes.\nA login form in different high contrast settings\nAnika Henke wrote about how users change colors on websites. She describes that while testing a form she discovered that input fields became invisible and buttons unrecognizable. You can see the same thing happening in the above screenshot. If it wasn’t for the placeholder text, users wouldn’t know that there are two input fields. A quick fix was to add a default border for inputs and buttons (not tested across browsers).\nAn improved login form with borders on inputs and buttons in different high contrast settings\nYou can use media queries to detect if high contrast mode is active and provide specific styles.\n/* High contrast mode active */\n@media (-ms-high-contrast:active) {\n}/* High contrast mode with specific black on white theme */\n@media (-ms-high-contrast:black-on-white) {\n}/* High contrast mode with specific white on black theme */\n@media (-ms-high-contrast:white-on-black) {\n}\nPatrick H. Lauke shares his thoughts and concerns about those media features in Windows High Contrast Mode: the limited utility of -ms-high-contrast. In response Greg Whitworth pointed out that the feature’s “sole purpose is to aid in providing users with contrast sensitivity a better experience. As such, you shouldn’t necessarily care about what the specific color is. To some extent, you shouldn’t even care how your site looks; but how it functions in high contrast.”.\nHigh contrast Chrome extension\nThere’s also a high contrast extension for Google Chrome that lets users browse the web with several high-contrast color filters designed to make it easier to read text.\nHigh contrast alternatives\nIf there are parts of your design that don’t have sufficient contrast, it is still possible to meet WCAG criteria using the Alternate Version clause. According to that you must provide users with either a link to a high contrast version of the page or a control on the page that can change the page so that all aspects conform.\nThere are some criteria for this alternative:\nThe link or control must be placed prominently on the page.\nThe link or control must itself meet the contrast requirement.\nThe new page must contain all the same information and functionality as the original page.\nThe new page must meet all the desired criteria.\nTesting with NoCoffee\nNoCoffee simulates low vision, color deficiencies and blocked visual fields\nMeeting the criteria is one thing, but testing with real people is another. Not all of us have the means for professional testing. Fortunately, NoCoffee provides us with a quick and easy way for simulating low vision, color deficiencies and blocked visual fields. It can be helpful for understanding the problems faced by people with slight to extreme vision problems.\nAs already mentioned, a very high percentage of men have color vision deficiencies. There are different types too. Deuteranomaly, one of the most common, makes it difficult to differentiate between red and green. We should avoid using colors alone as visual cues because interfaces may become unusable for people with color vision deficiency.\nI took the form from the previous example and added borders to the input fields to indicate success and error states. The following screenshot shows that color alone doesn’t suffice for giving users feedback. The border colors are either not visible at all or wrong.\nDifferentiating success and failure in forms by color alone doesn’t work in high contrast mode.\nAdding simple icons may help to improve the accessibility and user experience.\nAnother example are links. They also shouldn’t differentiate from normal text by color alone. It’s best to keep underlines on links.\nThere are numerous ways of changing the order in which items are laid out. For example, there’s order and flex-direction for Flexbox or order, flex-auto-flow and of course explicit placement for Grid. While those properties are really helpful, they may create a disconnect between the DOM order and visual presentation of content.\nIn the following example you can see a gallery, in which the images have been positioned using several grid properties.\nAt first glance, there doesn’t seem to be an issue, but when you use the keyboard to jump from image to image, you will see that the order is completely unpredictable. There’s no way of knowing which image will be highlighted next, when you press the Tab key. Now combine that with missing focus styles and you’ve created the perfect worst case scenario.\nUnpredictable or wrong order doesn’t just concern keyboard users. Screen readers announce contents in DOM order, the software is not affected by ordering in CSS, but its users are. You might think that screen reader users don’t care about the visual representation of content. That’s not always the case because not all screen reader users are blind. Some have low vision or learning disabilities and use screen readers to supplement what they see on the screen.\nThose ordering issues don’t just apply for flex- or grid-items, but for any sort of positioning. It’s important to order content in a way where it makes sense without styles and then check if it corresponds with the order in the design. If not, you may have to rethink your design. Whatever you do don’t blindly reorder elements in your markup just because you’re not able to position them in CSS correctly.\nWatch Rob Dodson’s Does reordering content affect accessibility? and read Adrian Roselli’s Source Order Matters for more details.\nI’ve already written about keyboard navigation basics and focusable elements in Writing Javascript with Accessibility in Mind. Before you keep reading jump to that article real quick if you’re completely new to the topic.\nIt’s important to make sure that your websites are navigable by keyboard. A lot of users rely on a keyboard when they surf the web. Among them are people with motor disabilities, blind people and people who don’t have hands or cannot use a mouse or track pad for whatever reason.\nThere are several things you can do in CSS to provide styles for focusable elements.\nSelecting focused items\nYou can select focusable items in their focus state by using the :focus pseudo-class and apply styles to them.\na:focus {\n  background-color: #000000;\n  color: #FFFFFF; \n}\nDefault focus styles are not very consistent across browsers, often ugly and in some cases they do not play well with your design. It’s advised to provide custom focus styling that improves the user experience and fits your design.\nWhatever you do, don’t just remove the default outline (dotted outline, blue or orange ring) without providing alternate styles. Users who depend on the keyboard as their primary way of navigation won’t be able to use your site, if they don’t know where the focus is.\nDon’t remove default focus styles without providing alternatives (Source: outlinenone.com)\nThat’s not just a tip, but a level AA criterion.\nDifferentiating between keyboard and mouse users\nAs already mentioned, one of the things that frustrates designers is that there are a lot of inconsistencies between browser when it comes to focus styles. Another source of frustration is that focus styles are also visible when users use the mouse on some focusable elements. Sometimes it’s not necessary to show them, it might even be distracting for mouse users and aesthetically unpleasant.\nA custom tab component that shows a blue outline in Chrome when the content area has been clicked (Source: frend.co)\nRemoving the outline property is not an option because then the component wouldn’t be accessible to keyboard users anymore. What we need is a way to differentiate between keyboard and mouse usage. That will be possible with the :focus-ring pseudo-class which is part of the CSS Level 4 selectors specification. “The :focus-ring pseudo-class applies while an element matches the:focus pseudo-class, and the UA determines via heuristics that the focus should be specially indicated on the element (typically via a “focus ring”).” (Source: CSS Selectors Level 4 Draft)\n/* Remove the default outline */\n:focus {\n  outline: none;\n}\n/* Add an outline only when it should be visible */\n:focus-ring {\n  outline: 2px solid blue;\n}\nUnfortunately, at the moment no browsers support the standard implementation of :focus-ring (Firefox supports -moz-focus-ring), but there is a lightweight poly-fill that will add a .focus-ring class when appropriate.\n/* If JavaScript is active and works, select all focusable elements that do not have the .focus-ring class and remove the outline */.js-focus-ring :focus:not(.focus-ring) {\n    outline-width: 0;\n}\nFor more details watch Rob Dodson’s a11ycasts episode, Focus Ring!\nStyling elements with focused children\n:focus-within is a relatively new pseudo class and already supported in most major browsers. It lets you select an element which has child elements that are currently focused.\nA form which has a drop shadow if one of its child items is focused.form:focus-within {\n  box-shadow: 0 0 4px 6px rgba(80,88,156,0.2);\n}\nYou can see that in action on CodePen.\nFor more details on focus basics watch What is Focus? on YouTube.\nWhen we’re building a new site we usually start by writing HTML. We choose the right mark-up and put elements in logical order. When the document is valid, well-structured and the order makes sense we add CSS. Before CSS Grid Layout, making layouts could get very tricky, especially when DOM order and the order in the design didn’t correspond. float, position and sometimes even Flexbox were in some situations not flexible enough and we would get tempted to change DOM order. Thanks to Grids explicit placement and its areas we have all the flexibility we need to position items. This is great, but Grid also introduces a new temptation that could comprise our document structure.\nLet’s say you have the following design and you use a h2 and a ul for those items because that’s what makes the most sense for you.\nA layout with a heading and a list\n  \nHeading\n  \nElement 1\n    \nElement 2\n    \nElement 3\n    \nElement 4\n    \nElement 5\n    \nElement 6\n  \n\n\nPutting those elements in columns and positioning the \n is fairly easy,.. or at least it seems like it is.\n.wrapper {\n  display: grid;\n  grid-template-columns: 120px repeat(2, 1fr);\n  grid-gap: 20px;\n}h2 {\n  grid-column: 2 / -1;\n}A layout with a heading and a list. Only direct children of a grid container are laid out on the grid.\nThat doesn’t look exactly like expected. The problem is that only direct children of a grid container are laid out on the grid, which in that case are \n and \n, but you want the \ns to act as grid items. The worst solutions for this is flattening the structure and getting rid of the\n and transforming the \n to\ns so that they’re direct children of the grid container.\nThe best solution would be to set the display property of the \n to subgrid, but unfortunately subgrid didn’t make it into Level 1 of the specification and we have to wait some more until it ships.\nYou could use display: contents on the \n, but Firefox is currently the only browser that supports it. display: contents causes an element’s children to appear as if they were direct children of the element’s parent, ignoring the element itself.\nUltimately, you have to define another grid for the \n. This isn’t ideal, but still better than flattening the structure of your document and compromising semantics. Since this is a very basic example and the list spans the whole grid, you can inherit some values from the parent grid.\nul {\n  /* span the whole grid */\n  grid-column: 1 / -1;  /* create another grid and inherit the values from the parent grid */\n  display: inherit;\n  grid-template-columns: inherit;\n  grid-gap: inherit;  /* overwrite display for browsers that understand display: contents */\n  display: contents;\n}\nYou can see both solutions in action on CodePen.\nEven though this post covers quite a few things, it’s by far not everything you need to know about CSS and accessibility. On the other hand, it’s also more than just a starting point. By getting DOM and focus order right and by caring about high contrast and generally by designing with accessibility in mind, you’re already doing a great job. If you put a little more accessibility consideration in every new page or site you’re making, you’re making the web a better place.\n\nDesigning with constraints in mind is simply designing well.\n\nAaron Gustafson\nI hope that you’ve enjoyed reading and learned something new. If you have questions or any sort of feedback, please leave a comment or contact me via twitter.\nThanks to my mentor Aaron Gustafson for helping me with this article.\nThis article is the third in a series of four. The last one is in the works and soon to be released.\nWriting HTML with accessibility in mind\nWriting JavaScript with accessibility in mind\nWriting CSS with accessibility in mind\nUp next: Learn how to design and develop with accessibility in mind\nThank you for reading and please don’t forget to like and share this article if you enjoyed it.\nWhile I work on the next post, you can check out some other stuff I wrote:\nFrom legible to readable text\n\nYour Body Text Is Too Small by Christian Miller\n\nHow the Web Became Unreadable by Kevin Marks\n\nWhy is Vertical Rhythm an Important Typography Practice? by Zell Liew\n\nPrecise control over responsive typography by Mike Riethmuller\nUsing content in pseudo elements cautiously\n\nAccessibility support for CSS generated content by Léonie Watson\nThe screen is not the only medium\n\nI totally forgot about print style sheets by Manuel Matuzović\nFallback for property values with incomplete support\n\nCSS and progressive enhancement by Michael Scharnagl\nThere are many ways to hide content\nTechniques for hiding text\n\nBeware smushed off-screen accessible text by J. Renée Beach\na11y.js: Hiding DOM elements\n\nBulletproof Accessible Icon Fonts by Zach Leatherman\nYou can’t trust bad contrast\n\nHow users change colours on websites by Anika Henke\n\nColor Contrast And Why You Should Rethink It by Cathy O’ Connor\n\nWhat is Color Contrast? by Rachel R. Vasquez\n\nA Beginner’s Guide to Contrasting Colors by Jacci Howard Bear\nColor alone should not be the only source of information\n\nBe Kind to the Color Blind by Chris Champbell\n\nOn Link Underlines by Adrian Roselli\nTaking care of order\n\nNot All Screen Reader Users Are Blind by Adrian Roselli\n\nSource Order Matters by Adrian Roselli\nFocus on what’s important: focus\na11y.js: Default Browser Focus Outline Styles\n\nKeyboard-Only Focus by Roman Komarov\nGrid and flat document structures\n\nModern CSS Layout, power and responsibility by Rachel Andrew\n Source"
      },
      "mention-of": "https://justmarkup.com/log/2017/02/css-and-progressive-enhancement/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://www.feedbooks.com/user/5556357/profile",
      "published": null,
      "wm-received": "2019-09-28T07:26:37Z",
      "wm-id": 700415,
      "wm-source": "http://www.feedbooks.com/user/5556357/profile",
      "wm-target": "https://justmarkup.com",
      "mention-of": "https://justmarkup.com",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://letto.rideparos.com/webkit-mobile/",
      "published": "2002-05-14T15:17:39+00:00",
      "wm-received": "2019-09-13T07:44:25Z",
      "wm-id": 689693,
      "wm-source": "http://letto.rideparos.com/webkit-mobile/",
      "wm-target": "https://justmarkup.com/log/2015/07/31/dealing-with-long-words-in-css",
      "name": "Webkit Mobile",
      "content": {
        "html": "<p>  \tSe stai cercando webkit mobile sei nel posto giusto. abbiamo 14 immagini su webkit mobile tra cui immagini, immagini, foto, sfondi e altro ancora. In queste pagine, abbiamo anche una varietà di immagini disponibili. Come png, jpg, gif animate, immagini artistiche, logo, bianco e nero, trasparenti, ecc.  </p>\n<p>    <a href=\"https://webdesignledger.com/wp-content/uploads/2015/08/webkit-new-logo-2015.png\">  \t<img src=\"https://tse2.mm.bing.net/th?id=OIP.p3yFafAU5fZN6ZyE3qYtyQHaIL&amp;pid=15.1\" alt=\"webkit project reveals   logo\" /></a>    <span></span>          \t</p>\n\n  \t\t\t<a href=\"https://webdesignledger.com/wp-content/uploads/2015/08/webkit-new-logo-2015.png\">  \t\t\t\t<img src=\"https://tse2.mm.bing.net/th?id=OIP.p3yFafAU5fZN6ZyE3qYtyQHaIL&amp;pid=15.1\" alt=\"webkit project reveals   logo\" /></a>  \t\t\t499 x 551 · png  \t\t\t\n<p>  \t\t\t\twebkit project reveals   logo  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://webdesignledger.com/wp-content/uploads/2015/08/webkit-new-logo-2015.png\">Download Image</a>  \t\t\t\t<br /><a href=\"http://webdesignledger.com/new-webkit-logo/\">More @ webdesignledger.com</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"http://cfile6.uf.tistory.com/image/250E26495110554F22578E\">  \t\t\t\t<img src=\"https://tse1.mm.bing.net/th?id=OIP.ITRcXI-gImUI9OzuXgEPywAAAA&amp;pid=15.1\" alt=\"androidwebview\" /></a>  \t\t\t200 x 383 · png  \t\t\t\n<p>  \t\t\t\tandroidwebview  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"http://cfile6.uf.tistory.com/image/250E26495110554F22578E\">Download Image</a>  \t\t\t\t<br /><a href=\"http://ggari.tistory.com/64\">More @ ggari.tistory.com</a>  \t\t\t</p>\n\n\n<p>      \t</p>\n\n  \t\t\t<a href=\"https://static.vecteezy.com/system/resources/previews/000/121/033/original/free-webkit-linear-gradient-top-vector.png\">  \t\t\t\t<img src=\"https://tse4.mm.bing.net/th?id=OIP.wbI28DawcBj8dON0N56s8wHaFL&amp;pid=15.1\" alt=\"webkit linear gradient top vector\" /></a>  \t\t\t1400 x 980 · png  \t\t\t\n<p>  \t\t\t\twebkit linear gradient top vector  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://static.vecteezy.com/system/resources/previews/000/121/033/original/free-webkit-linear-gradient-top-vector.png\">Download Image</a>  \t\t\t\t<br /><a href=\"http://www.vecteezy.com/vector-art/121033-free-webkit-linear-gradient-top-vector\">More @ www.vecteezy.com</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"https://cms-assets.tutsplus.com/uploads/users/48/posts/6966/image/CSS3-Scrollbar.png\">  \t\t\t\t<img src=\"https://tse2.mm.bing.net/th?id=OIP.G2nElzn8shXG9RR0seh_2AHaDv&amp;pid=15.1\" alt=\"quick tip styling scrollbars  match  ui design\" /></a>  \t\t\t600 x 303 · png  \t\t\t\n<p>  \t\t\t\tquick tip styling scrollbars  match  ui design  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://cms-assets.tutsplus.com/uploads/users/48/posts/6966/image/CSS3-Scrollbar.png\">Download Image</a>  \t\t\t\t<br /><a href=\"https://webdesign.tutsplus.com/articles/quick-tip-styling-scrollbars-to-match-your-ui-design--webdesign-9430\">More @ webdesign.tutsplus.com</a>  \t\t\t</p>\n\n\n<p>      \t</p>\n\n  \t\t\t<a href=\"http://www.techfieber.de/wp-content/uploads/2012/07/towelmate1.jpg\">  \t\t\t\t<img src=\"https://tse1.mm.bing.net/th?id=OIP.LtSCfF1d3gIlQAPSNEtSXAHaE8&amp;pid=15.1\" alt=\"towelmate kampf ansage  strand langfinger smartphone\" /></a>  \t\t\t600 x 400 · jpeg  \t\t\t\n<p>  \t\t\t\ttowelmate kampf ansage  strand langfinger smartphone  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"http://www.techfieber.de/wp-content/uploads/2012/07/towelmate1.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"http://www.techfieber.de/2014/06/23/towelmate-kampf-ansage-an-strand-langfinger-smartphone-im-handtuch-verstecken/\">More @ www.techfieber.de</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"http://blogimg.goo.ne.jp/user_image/42/74/8ee7963c3cd447bd505480824df117e4.jpg\">  \t\t\t\t<img src=\"https://tse4.mm.bing.net/th?id=OIP.admkeUOmJezTYLyYzpzO9QAAAA&amp;pid=15.1\" alt=\"\" /></a>  \t\t\t446 x 595 · jpeg  \t\t\t\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"http://blogimg.goo.ne.jp/user_image/42/74/8ee7963c3cd447bd505480824df117e4.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"http://www.soundvillage.co.jp/oye/oye.html\">More @ www.soundvillage.co.jp</a>  \t\t\t</p>\n\n\n<p>      \t</p>\n\n  \t\t\t<a href=\"https://www.fngtps.com/2010/mobile-safari-image-resource-limit-workaround/ipad_with.jpg\">  \t\t\t\t<img src=\"https://tse4.mm.bing.net/th?id=OIP.jqlsB8L4MU6jMi1ibySEQwHaJh&amp;pid=15.1\" alt=\"work   mobile safari image resource limit\" /></a>  \t\t\t992 x 1276 · jpeg  \t\t\t\n<p>  \t\t\t\twork   mobile safari image resource limit  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://www.fngtps.com/2010/mobile-safari-image-resource-limit-workaround/ipad_with.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"https://www.fngtps.com/2010/mobile-safari-image-resource-limit-workaround/\">More @ www.fngtps.com</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"https://i1109.photobucket.com/albums/h427/jamshafiq_hussain/Shahrukh%20Nizami/Hassan%20Ahmed/81962ZbUW-L_SL1500_.jpg\">  \t\t\t\t<img src=\"https://tse1.mm.bing.net/th?id=OIP.Zsjf4PoaRdKLQyBVfLOh7QHaLM&amp;pid=15.1\" alt=\"dell streak  tablet pc price  pakistan dell\" /></a>  \t\t\t677 x 1024 · jpeg  \t\t\t\n<p>  \t\t\t\tdell streak  tablet pc price  pakistan dell  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://i1109.photobucket.com/albums/h427/jamshafiq_hussain/Shahrukh%20Nizami/Hassan%20Ahmed/81962ZbUW-L_SL1500_.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"http://www.symbios.pk/dell-streak-7-tablet-pc\">More @ www.symbios.pk</a>  \t\t\t</p>\n\n\n<p>      \t</p>\n\n  \t\t\t<a href=\"http://files.smashingmagazine.com/wallpapers/june-15/strawberry-fields/june-15-strawberry-fields-full.jpg\">  \t\t\t\t<img src=\"https://tse1.mm.bing.net/th?id=OIP.4vnfZW91hSXyZqt1a8xZjwHaEK&amp;pid=15.1\" alt=\"webmasters gallerymay  webmasters gallery\" /></a>  \t\t\t1000 x 562 · jpeg  \t\t\t\n<p>  \t\t\t\twebmasters gallerymay  webmasters gallery  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"http://files.smashingmagazine.com/wallpapers/june-15/strawberry-fields/june-15-strawberry-fields-full.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"https://www.webmastersgallery.com/2015/05/\">More @ www.webmastersgallery.com</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Browser_Market_Map_June_2015.svg/1200px-Browser_Market_Map_June_2015.svg.png\">  \t\t\t\t<img src=\"https://tse2.mm.bing.net/th?id=OIP.JrrKKpkpdJ1SGuqSPE8SrgHaDz&amp;pid=15.1\" alt=\"browser wars wikipedia\" /></a>  \t\t\t1200 x 616 · png  \t\t\t\n<p>  \t\t\t\tbrowser wars wikipedia  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Browser_Market_Map_June_2015.svg/1200px-Browser_Market_Map_June_2015.svg.png\">Download Image</a>  \t\t\t\t<br /><a href=\"https://en.wikipedia.org/wiki/Browser_wars\">More @ en.wikipedia.org</a>  \t\t\t</p>\n\n\n<p>      \t</p>\n\n  \t\t\t<a href=\"https://justmarkup.com/log/wp-content/uploads/2015/07/long-word-overlow.png\">  \t\t\t\t<img src=\"https://tse4.mm.bing.net/th?id=OIP.L2E-g_IB2FTyOpzJQFauwwHaCx&amp;pid=15.1\" alt=\"dealing  long words  css justmarkup\" /></a>  \t\t\t1194 x 446 · png  \t\t\t\n<p>  \t\t\t\tdealing  long words  css justmarkup  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://justmarkup.com/log/wp-content/uploads/2015/07/long-word-overlow.png\">Download Image</a>  \t\t\t\t<br /><a href=\"https://justmarkup.com/log/2015/07/31/dealing-with-long-words-in-css\">More @ justmarkup.com</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"https://psddd.co/wp-content/uploads/2017/06/wireflow.jpg\">  \t\t\t\t<img src=\"https://tse1.mm.bing.net/th?id=OIP.AGbOy9q4QcGtcOMfdzG-JwHaFj&amp;pid=15.1\" alt=\"wireframe kits templates  ui designers\" /></a>  \t\t\t800 x 600 · jpeg  \t\t\t\n<p>  \t\t\t\twireframe kits templates  ui designers  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://psddd.co/wp-content/uploads/2017/06/wireflow.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"http://psddd.co/category/wireframe-kits\">More @ psddd.co</a>  \t\t\t</p>\n\n\n<p>      \t</p>\n\n  \t\t\t<a href=\"https://cdn.arstechnica.net/wp-content/uploads/2013/02/gretchen-weiners-640x320.png\">  \t\t\t\t<img src=\"https://tse1.mm.bing.net/th?id=OIP.793C7rLq7nJTEuF6qqz8zgHaDt&amp;pid=15.1\" alt=\"mobile world congress   girls  nfc isnt\" /></a>  \t\t\t640 x 320 · png  \t\t\t\n<p>  \t\t\t\tmobile world congress   girls  nfc isnt  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"https://cdn.arstechnica.net/wp-content/uploads/2013/02/gretchen-weiners-640x320.png\">Download Image</a>  \t\t\t\t<br /><a href=\"https://arstechnica.com/staff/2013/02/mobile-world-congress-is-mean-girls-and-nfc-isnt-going-to-happen/\">More @ arstechnica.com</a>  \t\t\t</p>\n\n  \t\t\t<a href=\"http://geotourweb.com/T4AAA.jpg\">  \t\t\t\t<img src=\"https://tse4.mm.bing.net/th?id=OIP.x4Zt3nwEhsMe3zImdx875gHaEy&amp;pid=15.1\" alt=\"dix classements dans lesquels la france arrive en tete rel\" /></a>  \t\t\t803 x 519 · jpeg  \t\t\t\n<p>  \t\t\t\tdix classements dans lesquels la france arrive en tete rel  \t\t\t</p>\n<p style=\"text-align:center;\">  \t\t\t\t<a href=\"http://geotourweb.com/T4AAA.jpg\">Download Image</a>  \t\t\t\t<br /><a href=\"http://geotourweb.com/nouvelle_page_3.htm\">More @ geotourweb.com</a>  \t\t\t</p>\n\n\n<p>      </p>\n<p>  \tNon dimenticare di aggiungere un segnalibro <a href=\"http://letto.rideparos.com/webkit-mobile/\">webkit mobile</a> usando Ctrl + D (PC) o Comando + D (macos). Se si utilizza il telefono cellulare, è possibile utilizzare anche il menu cassetto dal browser. Che si tratti di Windows, Mac, iOS o Android, sarai in grado di scaricare le immagini utilizzando il pulsante di download.  </p>",
        "text": "Se stai cercando webkit mobile sei nel posto giusto. abbiamo 14 immagini su webkit mobile tra cui immagini, immagini, foto, sfondi e altro ancora. In queste pagine, abbiamo anche una varietà di immagini disponibili. Come png, jpg, gif animate, immagini artistiche, logo, bianco e nero, trasparenti, ecc.  \n      \t              \t\n\n  \t\t\t  \t\t\t\t  \t\t\t499 x 551 · png  \t\t\t\n  \t\t\t\twebkit project reveals   logo  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ webdesignledger.com  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t200 x 383 · png  \t\t\t\n  \t\t\t\tandroidwebview  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ ggari.tistory.com  \t\t\t\n\n\n      \t\n\n  \t\t\t  \t\t\t\t  \t\t\t1400 x 980 · png  \t\t\t\n  \t\t\t\twebkit linear gradient top vector  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ www.vecteezy.com  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t600 x 303 · png  \t\t\t\n  \t\t\t\tquick tip styling scrollbars  match  ui design  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ webdesign.tutsplus.com  \t\t\t\n\n\n      \t\n\n  \t\t\t  \t\t\t\t  \t\t\t600 x 400 · jpeg  \t\t\t\n  \t\t\t\ttowelmate kampf ansage  strand langfinger smartphone  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ www.techfieber.de  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t446 x 595 · jpeg  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ www.soundvillage.co.jp  \t\t\t\n\n\n      \t\n\n  \t\t\t  \t\t\t\t  \t\t\t992 x 1276 · jpeg  \t\t\t\n  \t\t\t\twork   mobile safari image resource limit  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ www.fngtps.com  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t677 x 1024 · jpeg  \t\t\t\n  \t\t\t\tdell streak  tablet pc price  pakistan dell  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ www.symbios.pk  \t\t\t\n\n\n      \t\n\n  \t\t\t  \t\t\t\t  \t\t\t1000 x 562 · jpeg  \t\t\t\n  \t\t\t\twebmasters gallerymay  webmasters gallery  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ www.webmastersgallery.com  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t1200 x 616 · png  \t\t\t\n  \t\t\t\tbrowser wars wikipedia  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ en.wikipedia.org  \t\t\t\n\n\n      \t\n\n  \t\t\t  \t\t\t\t  \t\t\t1194 x 446 · png  \t\t\t\n  \t\t\t\tdealing  long words  css justmarkup  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ justmarkup.com  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t800 x 600 · jpeg  \t\t\t\n  \t\t\t\twireframe kits templates  ui designers  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ psddd.co  \t\t\t\n\n\n      \t\n\n  \t\t\t  \t\t\t\t  \t\t\t640 x 320 · png  \t\t\t\n  \t\t\t\tmobile world congress   girls  nfc isnt  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ arstechnica.com  \t\t\t\n\n  \t\t\t  \t\t\t\t  \t\t\t803 x 519 · jpeg  \t\t\t\n  \t\t\t\tdix classements dans lesquels la france arrive en tete rel  \t\t\t\n  \t\t\t\tDownload Image  \t\t\t\t\nMore @ geotourweb.com  \t\t\t\n\n\n      \n  \tNon dimenticare di aggiungere un segnalibro webkit mobile usando Ctrl + D (PC) o Comando + D (macos). Se si utilizza il telefono cellulare, è possibile utilizzare anche il menu cassetto dal browser. Che si tratti di Windows, Mac, iOS o Android, sarai in grado di scaricare le immagini utilizzando il pulsante di download."
      },
      "mention-of": "https://justmarkup.com/log/2015/07/31/dealing-with-long-words-in-css",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://ms1.taes.ylc.edu.tw/userinfo.php?uid=5109507",
      "published": null,
      "wm-received": "2019-09-10T22:20:33Z",
      "wm-id": 688396,
      "wm-source": "http://ms1.taes.ylc.edu.tw/userinfo.php?uid=5109507",
      "wm-target": "https://justmarkup.com",
      "mention-of": "https://justmarkup.com",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "https://authoritywebsiteincome.com/10-awesome-free-website-background-image-resource-list-2019/",
      "published": null,
      "wm-received": "2019-08-14T14:38:50Z",
      "wm-id": 668342,
      "wm-source": "https://authoritywebsiteincome.com/10-awesome-free-website-background-image-resource-list-2019/",
      "wm-target": "https://justmarkup.com/log/2015/03/dynamic-responsive-background-images/",
      "mention-of": "https://justmarkup.com/log/2015/03/dynamic-responsive-background-images/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "@rem",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/4656aa421b70fa8a5419419bcc936989c11e3d2534e2c6ed2a7bfe7da6c347ac.jpg",
        "url": "https://twitter.com/rem"
      },
      "url": "https://twitter.com/justmarkup/status/1154059277126045697#favorited-by-648873",
      "published": null,
      "wm-received": "2019-07-25T14:58:51Z",
      "wm-id": 654387,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1154059277126045697/648873",
      "wm-target": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "like-of": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Jens Grochtdreis",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/76c59a44803d2fe0e2760190e87623c4e62786dae9dc1637cc0ab25b98fde15b.png",
        "url": "https://twitter.com/Flocke"
      },
      "url": "https://twitter.com/justmarkup/status/1154059277126045697#favorited-by-7015572",
      "published": null,
      "wm-received": "2019-07-25T14:58:51Z",
      "wm-id": 654388,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1154059277126045697/7015572",
      "wm-target": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "like-of": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Gabor Lenard",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/536d80760bd8ac34226eaefd3a7a998ae866eda3234238995fb55cca436f0bfc.png",
        "url": "https://twitter.com/zengabor"
      },
      "url": "https://twitter.com/justmarkup/status/1154059277126045697#favorited-by-803501",
      "published": null,
      "wm-received": "2019-07-25T14:58:50Z",
      "wm-id": 654385,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1154059277126045697/803501",
      "wm-target": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "like-of": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "jalbertbowdenii",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/ffddce0636707fc3ee227533409daf86dcde32f1b99362fa80b95cad363ed309.jpg",
        "url": "https://twitter.com/jalbertbowdenii"
      },
      "url": "https://twitter.com/justmarkup/status/1154059277126045697#favorited-by-14465889",
      "published": null,
      "wm-received": "2019-07-25T14:58:50Z",
      "wm-id": 654386,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1154059277126045697/14465889",
      "wm-target": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "like-of": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Michael Scharnagl",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/0a236d69d7269a332c3cec198e0fce62d5d6c9749c60db7513c65f2511dbca5c.jpg",
        "url": "https://twitter.com/justmarkup"
      },
      "url": "https://twitter.com/justmarkup/status/1154059277126045697",
      "published": "2019-07-24T16:02:27+00:00",
      "wm-received": "2019-07-24T16:06:08Z",
      "wm-id": 653460,
      "wm-source": "https://brid-gy.appspot.com/post/twitter/rem/1154059277126045697",
      "wm-target": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "content": {
        "html": "In 2015 I published the article »Progressive enhancement is not…« <a href=\"https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/\">justmarkup.com/articles/2015-…</a> - after getting inspired reading about EdgeConf - now 4 years later <a href=\"https://twitter.com/rem\">@rem</a> publishes this, which they started also after the same EdgeConf. The world is small and PE never gets old :-)\n<a class=\"u-mention\" href=\"https://remysharp.com/2019/07/24/progressive-enhancement\"></a>",
        "text": "In 2015 I published the article »Progressive enhancement is not…« justmarkup.com/articles/2015-… - after getting inspired reading about EdgeConf - now 4 years later @rem publishes this, which they started also after the same EdgeConf. The world is small and PE never gets old :-)"
      },
      "mention-of": "https://justmarkup.com/articles/2015-07-03-progressive-enhancement-is-not/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "carlos",
        "photo": "",
        "url": "https://publishing-project.rivendellweb.net/author/carlos/"
      },
      "url": "https://publishing-project.rivendellweb.net/getting-into-a-performance-mindset/",
      "published": "2019-06-24T11:30:06-07:00",
      "wm-received": "2019-06-24T18:32:24Z",
      "wm-id": 632586,
      "wm-source": "https://publishing-project.rivendellweb.net/getting-into-a-performance-mindset/",
      "wm-target": "https://justmarkup.com/log/2015/02/cut-the-mustard-revisited/",
      "name": "Getting into a performance mindset",
      "content": {
        "html": "<p>Web performance is hard. There is no one size fits all solution and the amount of work we do to make our content performant is more than what we may want to do. This post will explore the process of creating and enforcing a performance budget, why it’s important and how will this improve the bottom line.</p>\n<p>The following figures show how much stuff measured by the median number of requests and size in kilobytes have grown in a 3-year period from 2016 to March 2019 (data is taken from the HTTP Archive’s <a href=\"https://httparchive.org/reports/state-of-the-web\">state of the web</a> report).</p>\n<img src=\"https://i1.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/04/3-year-requests.png?w=525\" alt=\"Timeseries of median total requests over a 3 year period\" /><img src=\"https://i1.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/04/3-year-requests.png?w=525\" alt=\"Timeseries of median total requests over a 3 year period\" />\nTimeseries of median total requests over a 3 year period<img src=\"https://i0.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/04/3-year-total-kilobytes.png?w=525\" alt=\"Timeseries of median total kilobytes over a 3 year period\" /><img src=\"https://i0.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/04/3-year-total-kilobytes.png?w=525\" alt=\"Timeseries of median total kilobytes over a 3 year period\" />\nTimeseries of total kilobytes over a 3 year period<p>The technical aspects are not the only things that matter. We need to get buy-in from management and prepare for a large round of researching the competition and what makes sense for your company and your team.</p>\n<p>Perhaps the best way to convince non-technical staff that performance is important and it matters is by reminding them that we leave money on the table if our site is slow or if the competitors’ sites are faster.</p>\n<p>You can improve conversion by improving performance and, conversely, you can lose users with a poor performing site:</p>\n<ul><li>\n<a href=\"https://www.creativebloq.com/features/how-the-bbc-builds-websites-that-scale\">The BBC found they lost an additional 10% of users</a> for every additional second their site took to load.</li>\n<li>\n<a href=\"https://www.thinkwithgoogle.com/intl/en-154/insights-inspiration/research-data/need-mobile-speed-how-mobile-latency-impacts-publisher-revenue/\">DoubleClick by Google found 53% of mobile site visits were abandoned</a> if a page took longer than 3 seconds to load.</li>\n</ul><h2>Building the budget</h2>\n<p>We have a rationale as to why we want to work on performance now we’ll get serious about creating the performance budget and enforcing it during development. Some of the sources I’m using to write this post include</p>\n<ul><li>\n<a href=\"https://medium.com/@addyosmani/start-performance-budgeting-dabde04cf6a3\">Addy Osmani</a> and</li>\n<li><a href=\"http://designingforperformance.com/weighing-aesthetics-and-performance/#approach-new-designs-with-a-performance-budget\">Lara Hogan</a></li>\n<li>Smashing Magazine’s <a href=\"https://www.smashingmagazine.com/2019/01/front-end-performance-checklist-2019-pdf-pages/\">Front-End Performance Checklist 2019</a>\n</li>\n</ul><p>Tools like <a href=\"http://www.performancebudget.io/\">Performance Budget Calculator</a>, <a href=\"https://codepen.io/bradfrost/full/EPQVBp/\">Performance Budget Builder</a> and <a href=\"https://browserdiet.com/calories/\">Browser Calories</a> can help in building the budget once we figure out what a budget is and decide that we want to use one for our project.</p>\n<h3>Understanding your users</h3>\n<p>The first thing to do is figure out who your users are and how they are accessing your content, and that of your competitors to get an idea of what will it take to become faster and have a performant site.</p>\n<h3>Decide what you’re measuring</h3>\n<p>Pick what it is that you want to measure based on your research then get to it. Items you test may include results from specific tools (WPT or Lighthouse) or how long does it take for a step of the process to complete (time to first byte or time to interactive).</p>\n<p>Some of the things you may want to measure:</p>\n<ul><li>Loading speeds for different parts of the site on desktop and mobile\n<ul><li>first versus second and third visits</li>\n</ul></li>\n<li>Additional measurements you can get from Webpage Test\n<ul><li>Time to first byte on mobile versus desktop</li>\n<li>Load Time</li>\n<li>First Byte</li>\n<li>Start Render</li>\n<li>Visually Complete</li>\n<li>Speed Index</li>\n</ul></li>\n<li>Additional metrics from lighthouse runs\n<ul><li>First Contentful Paint</li>\n<li>Time to Interactive</li>\n<li>First Meaningful Paint</li>\n<li>First CPU Idle</li>\n</ul></li>\n</ul><p>Make sure that when you run the tests on both mobile and desktop and document the settings so you can repeat the tests as you change things. Ideally, also save the archive file (<code>.har</code> extension) that the tools provide so you can compare before and after any changes.</p>\n<p>Always test on a device either locally or through testing labs that provide real devices. No matter how good a mobile simulator is there are things it can’t do… All desktop machines use symmetrical multiprocessors as opposed to the asymmetrical setup of mobile devices, among other things.</p>\n<p>Use analytics to determine what devices and browsers are visiting your site. When testing, set up a clean browser profile in addition to a typical user profile with the most common browser extensions.</p>\n<p>Also, make sure that you test the competition’s sites in terms of performance. Use the same metrics that you test your site with on your competitors’.</p>\n<p>Once you have the performance data for your site and those of your competitors you can set up your budget. The common wisdom about performance budgets is to <strong>be 20% faster than your competitors</strong>.</p>\n<h3>Note: Differences between mobile and desktop</h3>\n<p> It’s not just the network time that’ll kill your app’s startup performance, but the time spent parsing and evaluating your script, during which time the browser becomes completely unresponsive.</p>\n<p> On mobile, delays get compounded by additional tasks the device has to perform before it gets your data to the browser for it to render. Those milliseconds rack up very quickly.</p>\n<p> See this presentation from Alex Rusell to get a better understanding of the challenges of the mobile web. It’s from 2016 but the underlying principles have not changed.</p>\n\n\n\n<h3>A (theoretical) set of budgets</h3>\n<p>The first set of budgets we get from running the pages on the site through Webpagetest.</p>\nMeasure\nMaximum\nTool\nNotes\nTotal page load time\n3 seconds\nWebPagetest, median from five runs on 3G\nAll pages\nTotal page load time\n3 seconds\nReal user monitoring tool, median across geographies\nAll pages\nTotal page weight\n800 KB\nWebPagetest\nAll pages\nSpeed Index\n1,000\nWebPagetest using Dulles location in Chrome on 3G\nAll pages except home page\nSpeed Index\n600\nWebPagetest using Dulles location in Chrome on 3G\nHome page\n<p>We can get additional information from running Lighthouse from Chrome’s developer tools (Audit menu)</p>\nMeasure\nMinimum\nTool\nPerformance\n95\nLighthouse, desktop, no throttle, running in the browser with user profile\nPerformance\n80\nLighthouse, mobile, slow 3G throttle, running in the browser with a user profile. Score different accounts for additional costs of mobile web browsing\n<p>We can set up a final set of budgets based on Webpackk bundles</p>\nMeasure\nMaximum\nTool\nNotes\nBundle size\n170KB\nWebpack\nMain Bundle\n<p>It’s important to remember: <strong>these are example metrics</strong> based on imaginary results from researching my company and the competition. Your research will almost certainly yield different results and produce different budget needs.</p>\n<p>When we build the content it’s easy to just build all aspects of the site and assume that, because we’ve minimized and bundled the code, everything will be fine… but that’s not necessarily the case.</p>\n<p>The first step in figuring out how to build a performant application is to inventory all assets (Javascript, images, fonts, third-party scripts and any other type of content for your site or app), and break them in groups:</p>\n<ul><li>\n<strong>Basic core experience</strong>: fully accessible content that works for all your target users regardless of browsers and versions</li>\n<li>\n<strong>Enhanced experience</strong> an enhanced experience for browsers that support them</li>\n<li>\n<strong>Extras</strong>: “Nice to have assets” that aren’t absolutely required and that can be lazy-loaded.</li>\n</ul><p>Defining the browsers that will get the enhanced experience can be a little tricky as <a href=\"https://justmarkup.com/log/2015/02/cut-the-mustard-revisited/\">cutting the mustard</a> for new features can be more complicated than it looks. While all the browsers that support ES2015+ modules support other features in the newer ECMA Script specifications, the reverse is not true. We might find ourselves trying to use modules and fetch in browsers that only support fetch.</p>\n<p>If you can get away with it use ES2015+ <code>&lt;script type=\"module\"&gt;</code> for loading JavaScript:</p>\n<ul><li>Modern browsers will interpret the script as a JavaScript module and run it as expected.</li>\n<li>Legacy browsers will ignore the module script because it won’t recognize the type attribute</li>\n</ul>\nCaveat: Android phones cut the mustard despite their limited memory and CPU capabilities. One way to work around this is to feature detect the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory\">Device Memory API</a> first and fall back to cutting the mustard.\n\n<h2>Keeping ourselves honest</h2>\n<p>Once we have the budget we need to enforce it.</p>\n<p>We’ll discuss some techniques to keep ourselves honest when working with our code to make sure that our code stays within the assigned budget.</p>\n<p>How we address these performance requirements and how seriously we enforce them is up to us. But I see no other way to really to get out of this bloated mess we’ve turned our web applications into.</p>\n<p>None of these tools and suggestions are “the one” true solution to performance improvement but, using them together, they can provide measurements and warnings for when we’re running away from our budgets.</p>\n<h3>Detecting performance issues at build time</h3>\n<p>There are several ways to monitor your code’s performance during the build phase of your project</p>\n<p>We will not discuss how to set up a Webpack build system. If you haven’t done so already there are several guides that will walk you through the process. This assumes you’re either building your Webpack configuration from scratch or modifying an existing one.</p>\n<p>Webpack’s built-in <a href=\"https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d\">performance options</a> give you the first line of defense by warning your team (or failing the build) if an asset or entry point goes over a specified size in bites.</p>\n<pre><code>module.exports = {\n  //...\n  performance: {\n    maxAssetSize: 100000,\n    maxEntrypointSize: 100000,\n    hints: \"warning\"\n  }\n};\n</code></pre>\n<p>The values for the attributes are explained in the table below:</p>\nAttribute\nDefault in bytes\nValue in the example in bytes\nDescription\nmaxAssetSize\n250000\n100000\nMaximum Value for individual assets\nmaxEntrypointSize\n250000\n100000\nMaximum Value for individual <a href=\"https://webpack.js.org/concepts/entry-points/\">entry points</a>\n\nhints\nwarning\nwarning\nValues discussed below\n<p>In this case, there’s only one bundle which also acts as the entry point.</p>\n<p>Possible values for hints are:</p>\n<ol><li>\n<strong>warning (default)</strong>: Displays a yellow warning message, but the build passes. It’s best to use this in development environments.</li>\n<li>\n<strong>error</strong>: Displays a red error message, but the build still passes. This setting is recommended for production builds.</li>\n<li>\n<strong>false</strong>: No warnings or errors are shown.</li>\n</ol><p>As a second warning/error stage, Webpack’s <a href=\"https://www.npmjs.com/package/size-plugin\">size-plugin</a> reports on each bundle size and whether the size as changed since the last time the command was run.</p>\n<img src=\"https://i1.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/05/webpack-performance.png?w=525&amp;ssl=1\" alt=\"Webpack size plugin in action\" /><img src=\"https://i1.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/05/webpack-performance.png?w=525&amp;ssl=1\" alt=\"Webpack size plugin in action\" />\nWebpack size plugin in action<p>TO use the plugin, first install it using NPM:</p>\n<pre><code>npm i -D size-plugin\n</code></pre>\n<p>Then add it to your configuration file in two steps. First import the plugin</p>\n<pre><code>// load the size plugin\nconst SizePlugin = require('size-plugin');\n</code></pre>\n<pre><code>module.exports = {\n  plugins: [\n    new SizePlugin()\n  ]\n}\n</code></pre>\n<p>Despite our best efforts in reducing bundle sizes and trimming our Javascript fat, we may still find out that our bundles are too large and we can’t figure out where the extra size comes from.</p>\n<p>One possibility is that we’re loading too many dependencies that we don’t need. Libraries like <a href=\"https://lodash.com/\">Lodash</a> and <a href=\"https://momentjs.com/\">Moment</a> are the most often cited culprits because developers don’t realize that they don’t have to import the whole library but only the portions we need.</p>\n<p><a href=\"https://www.npmjs.com/package/webpack-bundle-analyzer\">Webpack Bundler Analyzer</a> produces a graphical visualization of the modules you app uses.</p>\n<img src=\"https://i0.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/05/webpack-bundle-analyzer.gif?w=525&amp;ssl=1\" alt=\"Webpack Analyzer Output\" /><img src=\"https://i0.wp.com/publishing-project.rivendellweb.net/wp-content/uploads/2019/05/webpack-bundle-analyzer.gif?w=525&amp;ssl=1\" alt=\"Webpack Analyzer Output\" />\nWebpack Analyzer Output<p>Bundle analyzer also gives you results for your compressed and minimized bundles. It presents three value for your bundles:</p>\nstat\nThis is the “input” size of your files, before any tansformations like minification.\nIt is called “stat size” because it’s obtained from Webpack’s stats object.\nparsed\nThis is the “output” size of your files. If you’re using a Webpack plugin such as Uglify, then this value will reflect the minified size of your code.\ngzip\nThis is the size of running the parsed bundles/modules through gzip compression.\n<h3>Babel and babel-preset-env</h3>\n<p>Transpiling ES2015+ to ES5 so it’ll run on older browsers can create bloated bundles for browsers that don’t need it. This is one of the reasons why the Babel team replaced the yearly plugins (ES2015, ES2016, ES2017) with a single plugin called <code>babel-preset-env</code></p>\n<p>Using the same lists as <code>autoprefixer</code> and other tools in the Javascript ecosystem <code>babel-preset-env</code> allows Webpack to only transpile those areas where the target browsers don’t support modern Javascript.</p>\n<p>This will reduce the size of your bundles but limit them to the browsers you choose in one of the following ways:</p>\n<ol><li>\n<code>browserslist</code> key in <code>package.json</code> file in current or parent directories. We recommend this way</li>\n<li>Tool options. For example browsers option in Autoprefixer</li>\n<li>\n<code>BROWSERSLIST</code> environment variable</li>\n<li>\n<code>browserslist</code> config file in current or parent directories.</li>\n<li>\n<code>.browserslistrc</code> config file in current or parent directories.</li>\n<li>If none of the above methods produce a valid result Browserslist will use these defaults:<code>&gt; 0.5%, last 2 versions, Firefox ESR, not dead</code>.</li>\n</ol><p>To run the plugin first install them. The example assumes that you’ve already installed Webpack for your project.</p>\n<pre><code>npm install -D babel-loader \\\n@babel/core \\\n@babel/runtime \\\n@babel/preset-env \\\n@babel/plugin-transform-runtime \\\n</code></pre>\n<p>Using Webpack’s <a href=\"https://webpack.js.org/loaders/babel-loader/\">bable-loader</a> we can specify directories to exclude (we don’t want to transpile all the files in <code>node_modules</code> and <code>bower_components</code>), and the plugins that we want to use: in this case <code>preset_env</code> and <code>plugin-transform-runtime</code>.</p>\n<p>The <code>transform-runtime</code> plugin tells Babel to require the runtime instead of inlining it, reducing the amount of duplicate code in our bundles</p>\n<p>The last thing to note is that the test for babel loader includes both <code>.js</code> and <code>.mjs</code> used by Node to identify ECMAScript modules and difference them from Common JS modules that are the default modules for the Node ecosystem.</p>\n<pre><code>rules: [\n  {\n    test: /\\.m?js$/,\n    exclude: /(node_modules|bower_components)/,\n    use: {\n      loader: 'babel-loader',\n      options: {\n        presets: ['@babel/preset-env'],\n        plugins: ['@babel/plugin-transform-runtime']\n      }\n    }\n  }\n]\n</code></pre>\n<p>This gives you a lot of control over what you transpile for which browsers and help reduce bundle sizes by eliminating unnecessary transpilation. However, it also makes you responsible for ensuring your audience can use the code and doesn’t have to rely on polyfills or graceful degradation if possible.</p>\n<h2>Measuring performance.</h2>\n<p>Just like we ran tests to establish our budgets we have to continue running them to make sure we stay within that budget and we don’t introduce any performance regressions.</p>\n<p>The first idea when it comes to keeping ourselves honest is to make sure that we run the performance tests that we want every time we build our project or whenever we accept a new PR for it.</p>\n<p><a href=\"http://webpagetest.org/\">Webpage Test</a> using the <a href=\"https://github.com/marcelduran/webpagetest-api\">webpagetest-api</a> wrapper automates Webpage tests. You can run it from the command line, through a build script, or as part of your CI process</p>\n<p><a href=\"https://github.com/GoogleChromeLabs/lighthousebot\">Lighthouse</a> makes Lighthouse reporting part of a Travis CI process and also gives you an integration with Github PRs so they can be evaluated for performance.</p>\n<img src=\"https://i0.wp.com/user-images.githubusercontent.com/238208/46586467-e93c8300-ca33-11e8-83ac-401b23227eb0.png?w=525&amp;ssl=1\" alt=\"Result of WPT and Lighthouse running for a PR\" /><img src=\"https://i0.wp.com/user-images.githubusercontent.com/238208/46586467-e93c8300-ca33-11e8-83ac-401b23227eb0.png?w=525&amp;ssl=1\" alt=\"Result of WPT and Lighthouse running for a PR\" />\nResult of WPT and Lighthouse running for a PR<p>Both of these tools give you performance visibility during the build process. If these either of these tools fails the results will be reflected in the PR and they can reject the PR automatically or let project owners take manual action on the request.</p>\n<h2>Dashboards and reporting</h2>\n<p>Tools like <a href=\"https://calibreapp.com/\">caliber</a> and <a href=\"https://speedcurve.com/\">Speedcurve</a> allow you to create dashboards to show the results of performance testing.</p>\n<p>The idea is to first surface performance for the whole team to see and to have a clear way to communicate to interested parties when a performance regression happens so you can take appropriate action.</p>\n\n\n\n<p>One thing that I found particularly interesting is how Speed Curve and Calibre allow you to create <a href=\"https://support.speedcurve.com/get-the-most-out-of-speedcurve/benchmark-yourself-against-your-competitors\">competitive dashboards</a> of your company against the competition you select.</p>\n<img src=\"https://i0.wp.com/downloads.intercomcdn.com/i/o/43393314/966d2ac9d79c58c2abe84983/image.png?w=525&amp;ssl=1\" alt=\"Comprative performance dashboard\" /><img src=\"https://i0.wp.com/downloads.intercomcdn.com/i/o/43393314/966d2ac9d79c58c2abe84983/image.png?w=525&amp;ssl=1\" alt=\"Comprative performance dashboard\" />\nComparative performance dashboard from Speedcurve<img src=\"https://i1.wp.com/downloads.intercomcdn.com/i/o/43393518/cf6e242e1b4f82bde996cd80/image.png?w=525&amp;ssl=1\" alt=\"Comparative performance filmstrip view\" /><img src=\"https://i1.wp.com/downloads.intercomcdn.com/i/o/43393518/cf6e242e1b4f82bde996cd80/image.png?w=525&amp;ssl=1\" alt=\"Comparative performance filmstrip view\" />\nComparative performance filmstrip view from Speedcurve",
        "text": "Web performance is hard. There is no one size fits all solution and the amount of work we do to make our content performant is more than what we may want to do. This post will explore the process of creating and enforcing a performance budget, why it’s important and how will this improve the bottom line.\nThe following figures show how much stuff measured by the median number of requests and size in kilobytes have grown in a 3-year period from 2016 to March 2019 (data is taken from the HTTP Archive’s state of the web report).\n\nTimeseries of median total requests over a 3 year period\nTimeseries of total kilobytes over a 3 year periodThe technical aspects are not the only things that matter. We need to get buy-in from management and prepare for a large round of researching the competition and what makes sense for your company and your team.\nPerhaps the best way to convince non-technical staff that performance is important and it matters is by reminding them that we leave money on the table if our site is slow or if the competitors’ sites are faster.\nYou can improve conversion by improving performance and, conversely, you can lose users with a poor performing site:\n\nThe BBC found they lost an additional 10% of users for every additional second their site took to load.\n\nDoubleClick by Google found 53% of mobile site visits were abandoned if a page took longer than 3 seconds to load.\nBuilding the budget\nWe have a rationale as to why we want to work on performance now we’ll get serious about creating the performance budget and enforcing it during development. Some of the sources I’m using to write this post include\n\nAddy Osmani and\nLara Hogan\nSmashing Magazine’s Front-End Performance Checklist 2019\n\nTools like Performance Budget Calculator, Performance Budget Builder and Browser Calories can help in building the budget once we figure out what a budget is and decide that we want to use one for our project.\nUnderstanding your users\nThe first thing to do is figure out who your users are and how they are accessing your content, and that of your competitors to get an idea of what will it take to become faster and have a performant site.\nDecide what you’re measuring\nPick what it is that you want to measure based on your research then get to it. Items you test may include results from specific tools (WPT or Lighthouse) or how long does it take for a step of the process to complete (time to first byte or time to interactive).\nSome of the things you may want to measure:\nLoading speeds for different parts of the site on desktop and mobile\nfirst versus second and third visits\n\nAdditional measurements you can get from Webpage Test\nTime to first byte on mobile versus desktop\nLoad Time\nFirst Byte\nStart Render\nVisually Complete\nSpeed Index\n\nAdditional metrics from lighthouse runs\nFirst Contentful Paint\nTime to Interactive\nFirst Meaningful Paint\nFirst CPU Idle\n\nMake sure that when you run the tests on both mobile and desktop and document the settings so you can repeat the tests as you change things. Ideally, also save the archive file (.har extension) that the tools provide so you can compare before and after any changes.\nAlways test on a device either locally or through testing labs that provide real devices. No matter how good a mobile simulator is there are things it can’t do… All desktop machines use symmetrical multiprocessors as opposed to the asymmetrical setup of mobile devices, among other things.\nUse analytics to determine what devices and browsers are visiting your site. When testing, set up a clean browser profile in addition to a typical user profile with the most common browser extensions.\nAlso, make sure that you test the competition’s sites in terms of performance. Use the same metrics that you test your site with on your competitors’.\nOnce you have the performance data for your site and those of your competitors you can set up your budget. The common wisdom about performance budgets is to be 20% faster than your competitors.\nNote: Differences between mobile and desktop\n It’s not just the network time that’ll kill your app’s startup performance, but the time spent parsing and evaluating your script, during which time the browser becomes completely unresponsive.\n On mobile, delays get compounded by additional tasks the device has to perform before it gets your data to the browser for it to render. Those milliseconds rack up very quickly.\n See this presentation from Alex Rusell to get a better understanding of the challenges of the mobile web. It’s from 2016 but the underlying principles have not changed.\n\n\n\nA (theoretical) set of budgets\nThe first set of budgets we get from running the pages on the site through Webpagetest.\nMeasure\nMaximum\nTool\nNotes\nTotal page load time\n3 seconds\nWebPagetest, median from five runs on 3G\nAll pages\nTotal page load time\n3 seconds\nReal user monitoring tool, median across geographies\nAll pages\nTotal page weight\n800 KB\nWebPagetest\nAll pages\nSpeed Index\n1,000\nWebPagetest using Dulles location in Chrome on 3G\nAll pages except home page\nSpeed Index\n600\nWebPagetest using Dulles location in Chrome on 3G\nHome page\nWe can get additional information from running Lighthouse from Chrome’s developer tools (Audit menu)\nMeasure\nMinimum\nTool\nPerformance\n95\nLighthouse, desktop, no throttle, running in the browser with user profile\nPerformance\n80\nLighthouse, mobile, slow 3G throttle, running in the browser with a user profile. Score different accounts for additional costs of mobile web browsing\nWe can set up a final set of budgets based on Webpackk bundles\nMeasure\nMaximum\nTool\nNotes\nBundle size\n170KB\nWebpack\nMain Bundle\nIt’s important to remember: these are example metrics based on imaginary results from researching my company and the competition. Your research will almost certainly yield different results and produce different budget needs.\nWhen we build the content it’s easy to just build all aspects of the site and assume that, because we’ve minimized and bundled the code, everything will be fine… but that’s not necessarily the case.\nThe first step in figuring out how to build a performant application is to inventory all assets (Javascript, images, fonts, third-party scripts and any other type of content for your site or app), and break them in groups:\n\nBasic core experience: fully accessible content that works for all your target users regardless of browsers and versions\n\nEnhanced experience an enhanced experience for browsers that support them\n\nExtras: “Nice to have assets” that aren’t absolutely required and that can be lazy-loaded.\nDefining the browsers that will get the enhanced experience can be a little tricky as cutting the mustard for new features can be more complicated than it looks. While all the browsers that support ES2015+ modules support other features in the newer ECMA Script specifications, the reverse is not true. We might find ourselves trying to use modules and fetch in browsers that only support fetch.\nIf you can get away with it use ES2015+ <script type=\"module\"> for loading JavaScript:\nModern browsers will interpret the script as a JavaScript module and run it as expected.\nLegacy browsers will ignore the module script because it won’t recognize the type attribute\n\nCaveat: Android phones cut the mustard despite their limited memory and CPU capabilities. One way to work around this is to feature detect the Device Memory API first and fall back to cutting the mustard.\n\nKeeping ourselves honest\nOnce we have the budget we need to enforce it.\nWe’ll discuss some techniques to keep ourselves honest when working with our code to make sure that our code stays within the assigned budget.\nHow we address these performance requirements and how seriously we enforce them is up to us. But I see no other way to really to get out of this bloated mess we’ve turned our web applications into.\nNone of these tools and suggestions are “the one” true solution to performance improvement but, using them together, they can provide measurements and warnings for when we’re running away from our budgets.\nDetecting performance issues at build time\nThere are several ways to monitor your code’s performance during the build phase of your project\nWe will not discuss how to set up a Webpack build system. If you haven’t done so already there are several guides that will walk you through the process. This assumes you’re either building your Webpack configuration from scratch or modifying an existing one.\nWebpack’s built-in performance options give you the first line of defense by warning your team (or failing the build) if an asset or entry point goes over a specified size in bites.\nmodule.exports = {\n  //...\n  performance: {\n    maxAssetSize: 100000,\n    maxEntrypointSize: 100000,\n    hints: \"warning\"\n  }\n};\n\nThe values for the attributes are explained in the table below:\nAttribute\nDefault in bytes\nValue in the example in bytes\nDescription\nmaxAssetSize\n250000\n100000\nMaximum Value for individual assets\nmaxEntrypointSize\n250000\n100000\nMaximum Value for individual entry points\n\nhints\nwarning\nwarning\nValues discussed below\nIn this case, there’s only one bundle which also acts as the entry point.\nPossible values for hints are:\n\nwarning (default): Displays a yellow warning message, but the build passes. It’s best to use this in development environments.\n\nerror: Displays a red error message, but the build still passes. This setting is recommended for production builds.\n\nfalse: No warnings or errors are shown.\nAs a second warning/error stage, Webpack’s size-plugin reports on each bundle size and whether the size as changed since the last time the command was run.\n\nWebpack size plugin in actionTO use the plugin, first install it using NPM:\nnpm i -D size-plugin\n\nThen add it to your configuration file in two steps. First import the plugin\n// load the size plugin\nconst SizePlugin = require('size-plugin');\n\nmodule.exports = {\n  plugins: [\n    new SizePlugin()\n  ]\n}\n\nDespite our best efforts in reducing bundle sizes and trimming our Javascript fat, we may still find out that our bundles are too large and we can’t figure out where the extra size comes from.\nOne possibility is that we’re loading too many dependencies that we don’t need. Libraries like Lodash and Moment are the most often cited culprits because developers don’t realize that they don’t have to import the whole library but only the portions we need.\nWebpack Bundler Analyzer produces a graphical visualization of the modules you app uses.\n\nWebpack Analyzer OutputBundle analyzer also gives you results for your compressed and minimized bundles. It presents three value for your bundles:\nstat\nThis is the “input” size of your files, before any tansformations like minification.\nIt is called “stat size” because it’s obtained from Webpack’s stats object.\nparsed\nThis is the “output” size of your files. If you’re using a Webpack plugin such as Uglify, then this value will reflect the minified size of your code.\ngzip\nThis is the size of running the parsed bundles/modules through gzip compression.\nBabel and babel-preset-env\nTranspiling ES2015+ to ES5 so it’ll run on older browsers can create bloated bundles for browsers that don’t need it. This is one of the reasons why the Babel team replaced the yearly plugins (ES2015, ES2016, ES2017) with a single plugin called babel-preset-env\nUsing the same lists as autoprefixer and other tools in the Javascript ecosystem babel-preset-env allows Webpack to only transpile those areas where the target browsers don’t support modern Javascript.\nThis will reduce the size of your bundles but limit them to the browsers you choose in one of the following ways:\n\nbrowserslist key in package.json file in current or parent directories. We recommend this way\nTool options. For example browsers option in Autoprefixer\n\nBROWSERSLIST environment variable\n\nbrowserslist config file in current or parent directories.\n\n.browserslistrc config file in current or parent directories.\nIf none of the above methods produce a valid result Browserslist will use these defaults:> 0.5%, last 2 versions, Firefox ESR, not dead.\nTo run the plugin first install them. The example assumes that you’ve already installed Webpack for your project.\nnpm install -D babel-loader \\\n@babel/core \\\n@babel/runtime \\\n@babel/preset-env \\\n@babel/plugin-transform-runtime \\\n\nUsing Webpack’s bable-loader we can specify directories to exclude (we don’t want to transpile all the files in node_modules and bower_components), and the plugins that we want to use: in this case preset_env and plugin-transform-runtime.\nThe transform-runtime plugin tells Babel to require the runtime instead of inlining it, reducing the amount of duplicate code in our bundles\nThe last thing to note is that the test for babel loader includes both .js and .mjs used by Node to identify ECMAScript modules and difference them from Common JS modules that are the default modules for the Node ecosystem.\nrules: [\n  {\n    test: /\\.m?js$/,\n    exclude: /(node_modules|bower_components)/,\n    use: {\n      loader: 'babel-loader',\n      options: {\n        presets: ['@babel/preset-env'],\n        plugins: ['@babel/plugin-transform-runtime']\n      }\n    }\n  }\n]\n\nThis gives you a lot of control over what you transpile for which browsers and help reduce bundle sizes by eliminating unnecessary transpilation. However, it also makes you responsible for ensuring your audience can use the code and doesn’t have to rely on polyfills or graceful degradation if possible.\nMeasuring performance.\nJust like we ran tests to establish our budgets we have to continue running them to make sure we stay within that budget and we don’t introduce any performance regressions.\nThe first idea when it comes to keeping ourselves honest is to make sure that we run the performance tests that we want every time we build our project or whenever we accept a new PR for it.\nWebpage Test using the webpagetest-api wrapper automates Webpage tests. You can run it from the command line, through a build script, or as part of your CI process\nLighthouse makes Lighthouse reporting part of a Travis CI process and also gives you an integration with Github PRs so they can be evaluated for performance.\n\nResult of WPT and Lighthouse running for a PRBoth of these tools give you performance visibility during the build process. If these either of these tools fails the results will be reflected in the PR and they can reject the PR automatically or let project owners take manual action on the request.\nDashboards and reporting\nTools like caliber and Speedcurve allow you to create dashboards to show the results of performance testing.\nThe idea is to first surface performance for the whole team to see and to have a clear way to communicate to interested parties when a performance regression happens so you can take appropriate action.\n\n\n\nOne thing that I found particularly interesting is how Speed Curve and Calibre allow you to create competitive dashboards of your company against the competition you select.\n\nComparative performance dashboard from Speedcurve\nComparative performance filmstrip view from Speedcurve"
      },
      "mention-of": "https://justmarkup.com/log/2015/02/cut-the-mustard-revisited/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://bober.co.id/",
      "published": null,
      "wm-received": "2019-06-20T06:01:15Z",
      "wm-id": 629406,
      "wm-source": "https://www.instagram.com/bobercafe/",
      "wm-target": "https://justmarkup.com/",
      "name": "Bober Cafe 24 Jam Bandung",
      "photo": "https://scontent-sjc3-1.cdninstagram.com/vp/1ac8257109678e3af8b1d945bd984801/5DC01397/t51.2885-19/s320x320/18380368_163523237512179_1931511561118023680_a.jpg?_nc_ht=scontent-sjc3-1.cdninstagram.com",
      "mention-of": "https://justmarkup.com/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://tagawazaimoku.com/blog/item_4563.html",
      "published": null,
      "wm-received": "2019-06-13T14:09:32Z",
      "wm-id": 625552,
      "wm-source": "http://tagawazaimoku.com/blog/item_4563.html",
      "wm-target": "https://justmarkup.com/",
      "mention-of": "https://justmarkup.com/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Nicolas Hoizey",
        "photo": "",
        "url": "https://nicolas-hoizey.com"
      },
      "url": "https://nicolas-hoizey.com/2018/08/using-cloudinary-s-fetch-api-to-convert-an-animated-gif-to-a-video.html",
      "published": "2018-08-01T00:00:00",
      "wm-received": "2019-06-11T13:49:52Z",
      "wm-id": 624800,
      "wm-source": "https://nicolas-hoizey.com/2018/08/using-cloudinary-s-fetch-api-to-convert-an-animated-gif-to-a-video.html",
      "wm-target": "https://justmarkup.com/log/2018/02/gifhancement/",
      "name": "Using Cloudinary’s Fetch API to convert an animated GIF to a video",
      "content": {
        "html": "<p>I like animated GIFs, like most people these days I think, but they are really heavy, hurting the performance of web pages, and consuming data plans faster than should be needed. So we need to convert them to videos, which are much lighter, for the same visual result. Let’s use Cloudinary.</p>\n\n<p><img src=\"https://res.cloudinary.com/nho/image/fetch/c_limit,f_auto,q_auto,w_300/https://nicolas-hoizey.com/assets/logos/cloudinary.png\" alt=\"The Cloudinary logo\" width=\"480\" height=\"350\" />\n<em>You need a Cloudinary account to try all of this, but no fear, its <strong>free plan</strong> is really confortable for personnal use or just testing: <a href=\"https://nho.io/cloudinary-signup\">signup for Cloudinary</a>.</em></p>\n\n<p>The animations in this post are animated GIFs provided by Giphy and obviously converted by Cloudinary.</p>\n\n<p>Your browser doesn’t support video. See <a href=\"https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif\">the animated GIF</a>.</p>\n\n<p>Cloudinary has been providing animated GIFs to video conversion for a while, as this 4 years old blog post shows: <a href=\"https://cloudinary.com/blog/reduce_size_of_animated_gifs_automatically_convert_to_webm_and_mp4\">Reduce size of animated GIFs, automatically convert to WebM and MP4</a>.</p>\n\n<p>Here is the simple process it described:</p>\n\n<p>First upload the animated GIF to Cloudinary, so that it is available at this URL:</p>\n\n<pre><code>https://res.cloudinary.com/demo/image/upload/kitten_fighting.gif\n</code></pre>\n\n<p>Then, change the file extension at the end of the URL to ask Cloudinary to convert it into WebM or MP4 video:</p>\n\n<pre><code>https://res.cloudinary.com/demo/image/upload/kitten_fighting.webm\nhttps://res.cloudinary.com/demo/image/upload/kitten_fighting.mp4\n</code></pre>\n\n<p>Easy! Magical!</p>\n\n<p>But <strong>I want my publication process to be even easier</strong>, not requiring any upload (manual or automated) of my digital assets.</p>\n\n<p>Your browser doesn’t support video. See <a href=\"https://media.giphy.com/media/C41yP1w3Pe0la/giphy.gif\">the animated GIF</a>.</p>\n\n<p>That’s why I find <a href=\"https://cloudinary.com/documentation/fetch_remote_images#remote_image_fetch_url\">Cloudinary’s Fetch API</a> awesome!</p>\n\n<p>You can also use Cloudinary’s Auto-Upload, which provides <a href=\"https://cloudinary.com/documentation/fetch_remote_images\">a lot more features</a>, but I like to keep things simple, and my master pristine images are hosted on my site anyway. Actually, <a href=\"https://nhoizey.github.io/jekyll-cloudinary/\">my Jekyll-Cloudinary plugin</a> uses the Fetch API to provide simple and efficient responsive images to Jekyll users.</p>\n\n<p>So, how can we use the Fetch API to convert animated GIFs to videos?</p>\n\n<p>Let’s say the pristine animated GIF is located at <code>https://example.com/anim.gif</code>.</p>\n\n<p>The simple Fetch API URL to serve this image though Cloudinary, but untouched, would be this:</p>\n\n<pre><code>https://res.cloudinary.com/&lt;cloud_name&gt;/image/fetch/https://example.com/anim.gif\n</code></pre>\n\n<p><code>&lt;cloud_name&gt;</code> should be replaced by your own <a href=\"https://cloudinary.com/documentation/solution_overview#cloud_name\">cloud_name</a>.</p>\n\n<p>If we try to replace <code>.gif</code> with <code>.mp4</code> at the end of this URL, like in the 4 years old Cloudinary post, it won’t work, because Cloudinary will try to fetch a video located at <code>https://example.com/anim.mp4</code>, which doesn’t exist.</p>\n\n<p>Your browser doesn’t support video. See <a href=\"https://media.giphy.com/media/5yeHSK4yNQAy4/giphy.gif\">the animated GIF</a>.</p>\n\n<p><strong>The solution</strong> is to use the <a href=\"https://cloudinary.com/documentation/image_transformations#image_format_support\">explicit format conversion parameter (<code>f_</code>)</a> you can set in your Fetch URL, before the pristine image URL:</p>\n\n<pre><code>https://res.cloudinary.com/&lt;cloud_name&gt;/image/fetch/f_mp4/https://example.com/anim.gif\n</code></pre>\n\n<p>So, we can replace this:</p>\n\n<pre><code><span>&lt;img</span> <span>src=</span><span>\"https://example.com/anim.gif\"</span> <span>alt=</span><span>\"an animation\"</span><span>&gt;</span>\n</code></pre>\n\n<p>With this:</p>\n\n<pre><code><span>&lt;video</span> <span>autoplay</span> <span>loop</span> <span>muted</span> <span>playsinline</span><span>&gt;</span>\n  <span>&lt;source</span> <span>src=</span><span>\"https://res.cloudinary.com/&lt;cloud_name&gt;/image/fetch/f_webm/https://example.com/anim.gif\"</span> <span>type=</span><span>\"video/webm\"</span><span>&gt;</span>\n  <span>&lt;source</span> <span>src=</span><span>\"https://res.cloudinary.com/&lt;cloud_name&gt;/image/fetch/f_mp4/https://example.com/anim.gif\"</span> <span>type=</span><span>\"video/mp4\"</span><span>&gt;</span>\n  <span>&lt;p&gt;</span>Your browser doesn't support HTML5 video, <span>&lt;a</span> <span>href=</span><span>\"https://example.com/anim.gif\"</span><span>&gt;</span>download the animated GIF<span>&lt;/a&gt;</span>.<span>&lt;/p&gt;</span>\n<span>&lt;/video&gt;</span>\n</code></pre>\n\n<p>Your browser doesn’t support video. See <a href=\"https://media.giphy.com/media/uKpWZU3VXLprW/giphy.gif\">the animated GIF</a>.</p>\n\n<p>Don’t put an <code>&lt;img&gt;</code> tag with the animated GIF as the fallback, it would be downloaded anyway, even if the browser supports and shows the video.</p>\n\n<p>Be careful, the transformation can take some time if the animated GIF is really heavy, so you might have to consider uploading it and perform the transformation asynchronously, without using the Fetch API.</p>\n\n<p>I didn’t find any of this explained in Cloudinary documentation, maybe because it mixes images and videos.</p>\n\n<h2>One more thing…</h2>\n\n<p>If you want to dive deeper in this topic, you can discover how — in the near future — animated GIFs converted to videos could be better loaded in <code>&lt;img&gt;</code> tags, with <a href=\"https://twitter.com/colinbendell\">Colin Bendell</a>’s post in the 2017 edition of Performance (Advent) Calendar: <a href=\"https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/\">Evolution of &lt;img&gt;: Gif without the GIF</a>.</p>\n\n<h2>Additional resources</h2>\n\n<ul>\n  <li>\n<a href=\"https://justmarkup.com/log/2018/02/gifhancement/\">Gifhancement – convert GIF to video and embed responsible</a> by <a href=\"https://justmarkup.com/log/servus-hello-and-welcome/\">Michael Scharnagl</a>\n</li>\n  <li>\n<a href=\"https://www.smashingmagazine.com/2018/11/gif-to-video/\">Improve Animated GIF Performance With HTML5 Video</a> on Smashing Magazine</li>\n</ul>",
        "text": "I like animated GIFs, like most people these days I think, but they are really heavy, hurting the performance of web pages, and consuming data plans faster than should be needed. So we need to convert them to videos, which are much lighter, for the same visual result. Let’s use Cloudinary.\n\n\nYou need a Cloudinary account to try all of this, but no fear, its free plan is really confortable for personnal use or just testing: signup for Cloudinary.\n\nThe animations in this post are animated GIFs provided by Giphy and obviously converted by Cloudinary.\n\nYour browser doesn’t support video. See the animated GIF.\n\nCloudinary has been providing animated GIFs to video conversion for a while, as this 4 years old blog post shows: Reduce size of animated GIFs, automatically convert to WebM and MP4.\n\nHere is the simple process it described:\n\nFirst upload the animated GIF to Cloudinary, so that it is available at this URL:\n\nhttps://res.cloudinary.com/demo/image/upload/kitten_fighting.gif\n\n\nThen, change the file extension at the end of the URL to ask Cloudinary to convert it into WebM or MP4 video:\n\nhttps://res.cloudinary.com/demo/image/upload/kitten_fighting.webm\nhttps://res.cloudinary.com/demo/image/upload/kitten_fighting.mp4\n\n\nEasy! Magical!\n\nBut I want my publication process to be even easier, not requiring any upload (manual or automated) of my digital assets.\n\nYour browser doesn’t support video. See the animated GIF.\n\nThat’s why I find Cloudinary’s Fetch API awesome!\n\nYou can also use Cloudinary’s Auto-Upload, which provides a lot more features, but I like to keep things simple, and my master pristine images are hosted on my site anyway. Actually, my Jekyll-Cloudinary plugin uses the Fetch API to provide simple and efficient responsive images to Jekyll users.\n\nSo, how can we use the Fetch API to convert animated GIFs to videos?\n\nLet’s say the pristine animated GIF is located at https://example.com/anim.gif.\n\nThe simple Fetch API URL to serve this image though Cloudinary, but untouched, would be this:\n\nhttps://res.cloudinary.com/<cloud_name>/image/fetch/https://example.com/anim.gif\n\n\n<cloud_name> should be replaced by your own cloud_name.\n\nIf we try to replace .gif with .mp4 at the end of this URL, like in the 4 years old Cloudinary post, it won’t work, because Cloudinary will try to fetch a video located at https://example.com/anim.mp4, which doesn’t exist.\n\nYour browser doesn’t support video. See the animated GIF.\n\nThe solution is to use the explicit format conversion parameter (f_) you can set in your Fetch URL, before the pristine image URL:\n\nhttps://res.cloudinary.com/<cloud_name>/image/fetch/f_mp4/https://example.com/anim.gif\n\n\nSo, we can replace this:\n\n<img src=\"https://example.com/anim.gif\" alt=\"an animation\">\n\n\nWith this:\n\n<video autoplay loop muted playsinline>\n  <source src=\"https://res.cloudinary.com/<cloud_name>/image/fetch/f_webm/https://example.com/anim.gif\" type=\"video/webm\">\n  <source src=\"https://res.cloudinary.com/<cloud_name>/image/fetch/f_mp4/https://example.com/anim.gif\" type=\"video/mp4\">\n  <p>Your browser doesn't support HTML5 video, <a href=\"https://example.com/anim.gif\">download the animated GIF</a>.</p>\n</video>\n\n\nYour browser doesn’t support video. See the animated GIF.\n\nDon’t put an <img> tag with the animated GIF as the fallback, it would be downloaded anyway, even if the browser supports and shows the video.\n\nBe careful, the transformation can take some time if the animated GIF is really heavy, so you might have to consider uploading it and perform the transformation asynchronously, without using the Fetch API.\n\nI didn’t find any of this explained in Cloudinary documentation, maybe because it mixes images and videos.\n\nOne more thing…\n\nIf you want to dive deeper in this topic, you can discover how — in the near future — animated GIFs converted to videos could be better loaded in <img> tags, with Colin Bendell’s post in the 2017 edition of Performance (Advent) Calendar: Evolution of <img>: Gif without the GIF.\n\nAdditional resources\n\n\n  \nGifhancement – convert GIF to video and embed responsible by Michael Scharnagl\n\n  \nImprove Animated GIF Performance With HTML5 Video on Smashing Magazine"
      },
      "mention-of": "https://justmarkup.com/log/2018/02/gifhancement/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Juan Fernandes",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/6f87f8397b1ce0e327624229127a7be4b7bd19ef83e8d1072275b56c8ad0bf3f.jpg",
        "url": "https://twitter.com/juanfernandes"
      },
      "url": "https://twitter.com/justmarkup/status/1128669001595461633#favorited-by-7581192",
      "published": null,
      "wm-received": "2019-05-15T15:00:05Z",
      "wm-id": 614440,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1128669001595461633/7581192",
      "wm-target": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "like-of": "https://justmarkup.com/notes/2019-05-06-version-eight/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Manuel Matuzović",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/bef8b2059829d0a46f469f0bc064f977f6be821d88dcedf0c01a27bb2f1109e9.jpeg",
        "url": "https://twitter.com/mmatuzo"
      },
      "url": "https://twitter.com/justmarkup/status/1180455549017739265#favorited-by-22161724",
      "published": null,
      "wm-received": "2019-10-05T12:16:10Z",
      "wm-id": 705176,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1180455549017739265/22161724",
      "wm-target": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "like-of": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Gabor Lenard",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/536d80760bd8ac34226eaefd3a7a998ae866eda3234238995fb55cca436f0bfc.png",
        "url": "https://twitter.com/zengabor"
      },
      "url": "https://twitter.com/justmarkup/status/1180455549017739265#favorited-by-803501",
      "published": null,
      "wm-received": "2019-10-14T15:28:04Z",
      "wm-id": 711434,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1180455549017739265/803501",
      "wm-target": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "like-of": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "feediary",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/629f45071ab73d4ba5d20c9e718010f98148159c636fc3b9fe79990a8e34ea1e.jpg",
        "url": "https://twitter.com/feediary"
      },
      "url": "https://twitter.com/feediary/status/1180503648385880065",
      "published": "2019-10-05T15:22:57+00:00",
      "wm-received": "2019-10-09T14:26:22Z",
      "wm-id": 707655,
      "wm-source": "https://brid-gy.appspot.com/repost/twitter/justmarkup/1180455549017739265/1180503648385880065",
      "wm-target": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "content": {
        "text": "✏️ Why I shut down the RSS reader feediary.\n\njustmarkup.com/notes/2019-10-…"
      },
      "repost-of": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "wm-property": "repost-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Giulia Chiola",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/7f4518cf683e7daf48f776a3783276df1754332ac0ac4a0fbcef42db60b1f71d.jpg",
        "url": "https://twitter.com/giulia_chiola"
      },
      "url": "https://twitter.com/giulia_chiola/status/1181587649070616576",
      "published": "2019-10-08T15:10:23+00:00",
      "wm-received": "2019-10-08T15:31:25Z",
      "wm-id": 706908,
      "wm-source": "https://brid-gy.appspot.com/post/twitter/justmarkup/1181587649070616576",
      "wm-target": "https://justmarkup.com//articles/2019-01-28-a-look-at-css-hyphenation-in-2019/",
      "content": {
        "html": "A look at CSS hyphenation in 2019 <a href=\"https://justmarkup.com//articles/2019-01-28-a-look-at-css-hyphenation-in-2019/\">justmarkup.com//articles/2019…</a>",
        "text": "A look at CSS hyphenation in 2019 justmarkup.com//articles/2019…"
      },
      "mention-of": "https://justmarkup.com//articles/2019-01-28-a-look-at-css-hyphenation-in-2019/",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Holger Bartel",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/592535dc857345dd207fd60638dac39139891257ffe2400f476a70ca705647be.jpg",
        "url": "https://twitter.com/foobartel"
      },
      "url": "https://twitter.com/justmarkup/status/1180455549017739265#favorited-by-205651658",
      "published": null,
      "wm-received": "2019-10-05T18:29:33Z",
      "wm-id": 705341,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1180455549017739265/205651658",
      "wm-target": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "like-of": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "feediary",
        "photo": "https://webmention.io/avatar/pbs.twimg.com/629f45071ab73d4ba5d20c9e718010f98148159c636fc3b9fe79990a8e34ea1e.jpg",
        "url": "https://twitter.com/feediary"
      },
      "url": "https://twitter.com/justmarkup/status/1180455549017739265#favorited-by-974306004140744705",
      "published": null,
      "wm-received": "2019-10-05T15:46:46Z",
      "wm-id": 705266,
      "wm-source": "https://brid-gy.appspot.com/like/twitter/justmarkup/1180455549017739265/974306004140744705",
      "wm-target": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "like-of": "https://justmarkup.com/notes/2019-10-05-behind-closing-feediary/",
      "wm-property": "like-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://www.nakama.theck.es/profile/humberto47",
      "published": null,
      "wm-received": "2019-10-20T16:24:35Z",
      "wm-id": 715296,
      "wm-source": "http://www.nakama.theck.es/profile/humberto47",
      "wm-target": "http://justmarkup.com/log/2018/03/collection-of-css-snippets/?utm_source=responsive+design+weekly&utm_campaign=32889969fb-rwd_newsletter_304&utm_medium=email&utm_term=0_df65b6d7c8-32889969fb-59139925&mc_cid=32889969fb&mc_eid=2bc83bf0a1",
      "mention-of": "http://justmarkup.com/log/2018/03/collection-of-css-snippets/?utm_source=responsive+design+weekly&utm_campaign=32889969fb-rwd_newsletter_304&utm_medium=email&utm_term=0_df65b6d7c8-32889969fb-59139925&mc_cid=32889969fb&mc_eid=2bc83bf0a1",
      "wm-property": "mention-of",
      "wm-private": false
    }
  ]
}